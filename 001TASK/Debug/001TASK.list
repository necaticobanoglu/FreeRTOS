
001TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800477c  0800477c  0000577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004858  08004858  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004858  08004858  00005858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004860  08004860  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004864  08004864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004868  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000197fc  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001980c  2001980c  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123b7  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ed  00000000  00000000  000183f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  0001ade8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dac  00000000  00000000  0001bfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023dec  00000000  00000000  0001cd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139fd  00000000  00000000  00040b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7b4f  00000000  00000000  0005453d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c08c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a30  00000000  00000000  0013c0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  00140b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004764 	.word	0x08004764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004764 	.word	0x08004764

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019240 	.word	0x20019240

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b988 	b.w	800058c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	468e      	mov	lr, r1
 800029c:	4604      	mov	r4, r0
 800029e:	4688      	mov	r8, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d962      	bls.n	8000370 <__udivmoddi4+0xdc>
 80002aa:	fab2 f682 	clz	r6, r2
 80002ae:	b14e      	cbz	r6, 80002c4 <__udivmoddi4+0x30>
 80002b0:	f1c6 0320 	rsb	r3, r6, #32
 80002b4:	fa01 f806 	lsl.w	r8, r1, r6
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	40b7      	lsls	r7, r6
 80002be:	ea43 0808 	orr.w	r8, r3, r8
 80002c2:	40b4      	lsls	r4, r6
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002d0:	0c23      	lsrs	r3, r4, #16
 80002d2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002da:	fb01 f20c 	mul.w	r2, r1, ip
 80002de:	429a      	cmp	r2, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002e8:	f080 80ea 	bcs.w	80004c0 <__udivmoddi4+0x22c>
 80002ec:	429a      	cmp	r2, r3
 80002ee:	f240 80e7 	bls.w	80004c0 <__udivmoddi4+0x22c>
 80002f2:	3902      	subs	r1, #2
 80002f4:	443b      	add	r3, r7
 80002f6:	1a9a      	subs	r2, r3, r2
 80002f8:	b2a3      	uxth	r3, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb00 fc0c 	mul.w	ip, r0, ip
 800030a:	459c      	cmp	ip, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x8e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	f080 80d6 	bcs.w	80004c4 <__udivmoddi4+0x230>
 8000318:	459c      	cmp	ip, r3
 800031a:	f240 80d3 	bls.w	80004c4 <__udivmoddi4+0x230>
 800031e:	443b      	add	r3, r7
 8000320:	3802      	subs	r0, #2
 8000322:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000326:	eba3 030c 	sub.w	r3, r3, ip
 800032a:	2100      	movs	r1, #0
 800032c:	b11d      	cbz	r5, 8000336 <__udivmoddi4+0xa2>
 800032e:	40f3      	lsrs	r3, r6
 8000330:	2200      	movs	r2, #0
 8000332:	e9c5 3200 	strd	r3, r2, [r5]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d905      	bls.n	800034a <__udivmoddi4+0xb6>
 800033e:	b10d      	cbz	r5, 8000344 <__udivmoddi4+0xb0>
 8000340:	e9c5 0100 	strd	r0, r1, [r5]
 8000344:	2100      	movs	r1, #0
 8000346:	4608      	mov	r0, r1
 8000348:	e7f5      	b.n	8000336 <__udivmoddi4+0xa2>
 800034a:	fab3 f183 	clz	r1, r3
 800034e:	2900      	cmp	r1, #0
 8000350:	d146      	bne.n	80003e0 <__udivmoddi4+0x14c>
 8000352:	4573      	cmp	r3, lr
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0xc8>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 8105 	bhi.w	8000566 <__udivmoddi4+0x2d2>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000362:	2001      	movs	r0, #1
 8000364:	4690      	mov	r8, r2
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0e5      	beq.n	8000336 <__udivmoddi4+0xa2>
 800036a:	e9c5 4800 	strd	r4, r8, [r5]
 800036e:	e7e2      	b.n	8000336 <__udivmoddi4+0xa2>
 8000370:	2a00      	cmp	r2, #0
 8000372:	f000 8090 	beq.w	8000496 <__udivmoddi4+0x202>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	2e00      	cmp	r6, #0
 800037c:	f040 80a4 	bne.w	80004c8 <__udivmoddi4+0x234>
 8000380:	1a8a      	subs	r2, r1, r2
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	b280      	uxth	r0, r0
 800038a:	b2bc      	uxth	r4, r7
 800038c:	2101      	movs	r1, #1
 800038e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000392:	fb0e 221c 	mls	r2, lr, ip, r2
 8000396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800039a:	fb04 f20c 	mul.w	r2, r4, ip
 800039e:	429a      	cmp	r2, r3
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x11e>
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x11c>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f200 80e0 	bhi.w	8000570 <__udivmoddi4+0x2dc>
 80003b0:	46c4      	mov	ip, r8
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003b8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003c0:	fb02 f404 	mul.w	r4, r2, r4
 80003c4:	429c      	cmp	r4, r3
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x144>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x142>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f200 80ca 	bhi.w	800056a <__udivmoddi4+0x2d6>
 80003d6:	4602      	mov	r2, r0
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003de:	e7a5      	b.n	800032c <__udivmoddi4+0x98>
 80003e0:	f1c1 0620 	rsb	r6, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ea:	431f      	orrs	r7, r3
 80003ec:	fa0e f401 	lsl.w	r4, lr, r1
 80003f0:	fa20 f306 	lsr.w	r3, r0, r6
 80003f4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	fa1f fc87 	uxth.w	ip, r7
 8000406:	fbbe f0f9 	udiv	r0, lr, r9
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000410:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000414:	fb00 fe0c 	mul.w	lr, r0, ip
 8000418:	45a6      	cmp	lr, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x1a0>
 8000420:	193c      	adds	r4, r7, r4
 8000422:	f100 3aff 	add.w	sl, r0, #4294967295
 8000426:	f080 809c 	bcs.w	8000562 <__udivmoddi4+0x2ce>
 800042a:	45a6      	cmp	lr, r4
 800042c:	f240 8099 	bls.w	8000562 <__udivmoddi4+0x2ce>
 8000430:	3802      	subs	r0, #2
 8000432:	443c      	add	r4, r7
 8000434:	eba4 040e 	sub.w	r4, r4, lr
 8000438:	fa1f fe83 	uxth.w	lr, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000448:	fb03 fc0c 	mul.w	ip, r3, ip
 800044c:	45a4      	cmp	ip, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1ce>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f103 3eff 	add.w	lr, r3, #4294967295
 8000456:	f080 8082 	bcs.w	800055e <__udivmoddi4+0x2ca>
 800045a:	45a4      	cmp	ip, r4
 800045c:	d97f      	bls.n	800055e <__udivmoddi4+0x2ca>
 800045e:	3b02      	subs	r3, #2
 8000460:	443c      	add	r4, r7
 8000462:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	fba0 ec02 	umull	lr, ip, r0, r2
 800046e:	4564      	cmp	r4, ip
 8000470:	4673      	mov	r3, lr
 8000472:	46e1      	mov	r9, ip
 8000474:	d362      	bcc.n	800053c <__udivmoddi4+0x2a8>
 8000476:	d05f      	beq.n	8000538 <__udivmoddi4+0x2a4>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x1fe>
 800047a:	ebb8 0203 	subs.w	r2, r8, r3
 800047e:	eb64 0409 	sbc.w	r4, r4, r9
 8000482:	fa04 f606 	lsl.w	r6, r4, r6
 8000486:	fa22 f301 	lsr.w	r3, r2, r1
 800048a:	431e      	orrs	r6, r3
 800048c:	40cc      	lsrs	r4, r1
 800048e:	e9c5 6400 	strd	r6, r4, [r5]
 8000492:	2100      	movs	r1, #0
 8000494:	e74f      	b.n	8000336 <__udivmoddi4+0xa2>
 8000496:	fbb1 fcf2 	udiv	ip, r1, r2
 800049a:	0c01      	lsrs	r1, r0, #16
 800049c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004a0:	b280      	uxth	r0, r0
 80004a2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004a6:	463b      	mov	r3, r7
 80004a8:	4638      	mov	r0, r7
 80004aa:	463c      	mov	r4, r7
 80004ac:	46b8      	mov	r8, r7
 80004ae:	46be      	mov	lr, r7
 80004b0:	2620      	movs	r6, #32
 80004b2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004b6:	eba2 0208 	sub.w	r2, r2, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e766      	b.n	800038e <__udivmoddi4+0xfa>
 80004c0:	4601      	mov	r1, r0
 80004c2:	e718      	b.n	80002f6 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e72c      	b.n	8000322 <__udivmoddi4+0x8e>
 80004c8:	f1c6 0220 	rsb	r2, r6, #32
 80004cc:	fa2e f302 	lsr.w	r3, lr, r2
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	40b1      	lsls	r1, r6
 80004d4:	fa20 f202 	lsr.w	r2, r0, r2
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	430a      	orrs	r2, r1
 80004de:	fbb3 f8fe 	udiv	r8, r3, lr
 80004e2:	b2bc      	uxth	r4, r7
 80004e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ee:	fb08 f904 	mul.w	r9, r8, r4
 80004f2:	40b0      	lsls	r0, r6
 80004f4:	4589      	cmp	r9, r1
 80004f6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004fa:	b280      	uxth	r0, r0
 80004fc:	d93e      	bls.n	800057c <__udivmoddi4+0x2e8>
 80004fe:	1879      	adds	r1, r7, r1
 8000500:	f108 3cff 	add.w	ip, r8, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x276>
 8000506:	4589      	cmp	r9, r1
 8000508:	d81f      	bhi.n	800054a <__udivmoddi4+0x2b6>
 800050a:	eba1 0109 	sub.w	r1, r1, r9
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	b292      	uxth	r2, r2
 800051c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000520:	4542      	cmp	r2, r8
 8000522:	d229      	bcs.n	8000578 <__udivmoddi4+0x2e4>
 8000524:	18ba      	adds	r2, r7, r2
 8000526:	f109 31ff 	add.w	r1, r9, #4294967295
 800052a:	d2c4      	bcs.n	80004b6 <__udivmoddi4+0x222>
 800052c:	4542      	cmp	r2, r8
 800052e:	d2c2      	bcs.n	80004b6 <__udivmoddi4+0x222>
 8000530:	f1a9 0102 	sub.w	r1, r9, #2
 8000534:	443a      	add	r2, r7
 8000536:	e7be      	b.n	80004b6 <__udivmoddi4+0x222>
 8000538:	45f0      	cmp	r8, lr
 800053a:	d29d      	bcs.n	8000478 <__udivmoddi4+0x1e4>
 800053c:	ebbe 0302 	subs.w	r3, lr, r2
 8000540:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000544:	3801      	subs	r0, #1
 8000546:	46e1      	mov	r9, ip
 8000548:	e796      	b.n	8000478 <__udivmoddi4+0x1e4>
 800054a:	eba7 0909 	sub.w	r9, r7, r9
 800054e:	4449      	add	r1, r9
 8000550:	f1a8 0c02 	sub.w	ip, r8, #2
 8000554:	fbb1 f9fe 	udiv	r9, r1, lr
 8000558:	fb09 f804 	mul.w	r8, r9, r4
 800055c:	e7db      	b.n	8000516 <__udivmoddi4+0x282>
 800055e:	4673      	mov	r3, lr
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1ce>
 8000562:	4650      	mov	r0, sl
 8000564:	e766      	b.n	8000434 <__udivmoddi4+0x1a0>
 8000566:	4608      	mov	r0, r1
 8000568:	e6fd      	b.n	8000366 <__udivmoddi4+0xd2>
 800056a:	443b      	add	r3, r7
 800056c:	3a02      	subs	r2, #2
 800056e:	e733      	b.n	80003d8 <__udivmoddi4+0x144>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	443b      	add	r3, r7
 8000576:	e71c      	b.n	80003b2 <__udivmoddi4+0x11e>
 8000578:	4649      	mov	r1, r9
 800057a:	e79c      	b.n	80004b6 <__udivmoddi4+0x222>
 800057c:	eba1 0109 	sub.w	r1, r1, r9
 8000580:	46c4      	mov	ip, r8
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	e7c4      	b.n	8000516 <__udivmoddi4+0x282>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fb41 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f845 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8ad 	bl	80006fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler,
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2302      	movs	r3, #2
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <main+0x80>)
 80005ae:	22c8      	movs	r2, #200	@ 0xc8
 80005b0:	4918      	ldr	r1, [pc, #96]	@ (8000614 <main+0x84>)
 80005b2:	4819      	ldr	r0, [pc, #100]	@ (8000618 <main+0x88>)
 80005b4:	f001 fdcb 	bl	800214e <xTaskCreate>
 80005b8:	6178      	str	r0, [r7, #20]
		  200,
		  "Hello World from Task-1",
		  2,
		  &task1_handle);

  configASSERT(pdPASS == status); //if 0(FALSE) trapped in a infinite loop to debug
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d00b      	beq.n	80005d8 <main+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005c4:	f383 8811 	msr	BASEPRI, r3
 80005c8:	f3bf 8f6f 	isb	sy
 80005cc:	f3bf 8f4f 	dsb	sy
 80005d0:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <main+0x44>

  status = xTaskCreate(task2_handler,
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	2302      	movs	r3, #2
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <main+0x8c>)
 80005e2:	22c8      	movs	r2, #200	@ 0xc8
 80005e4:	490e      	ldr	r1, [pc, #56]	@ (8000620 <main+0x90>)
 80005e6:	480f      	ldr	r0, [pc, #60]	@ (8000624 <main+0x94>)
 80005e8:	f001 fdb1 	bl	800214e <xTaskCreate>
 80005ec:	6178      	str	r0, [r7, #20]
		  200,
		  "Hello World from Task-2",
		  2,
		  &task2_handle);

  configASSERT(pdPASS == status); //if 0(FALSE) trapped in a infinite loop to debug
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d00b      	beq.n	800060c <main+0x7c>
    __asm volatile
 80005f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005f8:	f383 8811 	msr	BASEPRI, r3
 80005fc:	f3bf 8f6f 	isb	sy
 8000600:	f3bf 8f4f 	dsb	sy
 8000604:	60fb      	str	r3, [r7, #12]
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <main+0x78>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x7c>
 800060e:	bf00      	nop
 8000610:	0800477c 	.word	0x0800477c
 8000614:	08004794 	.word	0x08004794
 8000618:	080009b9 	.word	0x080009b9
 800061c:	0800479c 	.word	0x0800479c
 8000620:	080047b4 	.word	0x080047b4
 8000624:	080009cd 	.word	0x080009cd

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	@ 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 f85a 	bl	80046f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800069c:	2332      	movs	r3, #50	@ 0x32
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd8f 	bl	80011d0 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f9a4 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fff0 	bl	80016c0 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f98d 	bl	8000a04 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	@ 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4ba2      	ldr	r3, [pc, #648]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4aa1      	ldr	r2, [pc, #644]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b9f      	ldr	r3, [pc, #636]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b9b      	ldr	r3, [pc, #620]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a9a      	ldr	r2, [pc, #616]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b98      	ldr	r3, [pc, #608]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b94      	ldr	r3, [pc, #592]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a93      	ldr	r2, [pc, #588]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b91      	ldr	r3, [pc, #580]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b8d      	ldr	r3, [pc, #564]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a8c      	ldr	r2, [pc, #560]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b8a      	ldr	r3, [pc, #552]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b86      	ldr	r3, [pc, #536]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a85      	ldr	r2, [pc, #532]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b83      	ldr	r3, [pc, #524]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b7f      	ldr	r3, [pc, #508]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a7e      	ldr	r2, [pc, #504]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b7c      	ldr	r3, [pc, #496]	@ (80009a0 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2108      	movs	r1, #8
 80007be:	4879      	ldr	r0, [pc, #484]	@ (80009a4 <MX_GPIO_Init+0x2a8>)
 80007c0:	f000 fcec 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	4877      	ldr	r0, [pc, #476]	@ (80009a8 <MX_GPIO_Init+0x2ac>)
 80007ca:	f000 fce7 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ce:	2200      	movs	r2, #0
 80007d0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007d4:	4875      	ldr	r0, [pc, #468]	@ (80009ac <MX_GPIO_Init+0x2b0>)
 80007d6:	f000 fce1 	bl	800119c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007da:	2308      	movs	r3, #8
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	486c      	ldr	r0, [pc, #432]	@ (80009a4 <MX_GPIO_Init+0x2a8>)
 80007f2:	f000 fb37 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4866      	ldr	r0, [pc, #408]	@ (80009a8 <MX_GPIO_Init+0x2ac>)
 800080e:	f000 fb29 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000822:	2305      	movs	r3, #5
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	485e      	ldr	r0, [pc, #376]	@ (80009a8 <MX_GPIO_Init+0x2ac>)
 800082e:	f000 fb19 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	485a      	ldr	r0, [pc, #360]	@ (80009b0 <MX_GPIO_Init+0x2b4>)
 8000848:	f000 fb0c 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800084c:	2310      	movs	r3, #16
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085c:	2306      	movs	r3, #6
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4852      	ldr	r0, [pc, #328]	@ (80009b0 <MX_GPIO_Init+0x2b4>)
 8000868:	f000 fafc 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800086c:	23e0      	movs	r3, #224	@ 0xe0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087c:	2305      	movs	r3, #5
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	484a      	ldr	r0, [pc, #296]	@ (80009b0 <MX_GPIO_Init+0x2b4>)
 8000888:	f000 faec 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800088c:	2304      	movs	r3, #4
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4845      	ldr	r0, [pc, #276]	@ (80009b4 <MX_GPIO_Init+0x2b8>)
 80008a0:	f000 fae0 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	483c      	ldr	r0, [pc, #240]	@ (80009b4 <MX_GPIO_Init+0x2b8>)
 80008c2:	f000 facf 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4833      	ldr	r0, [pc, #204]	@ (80009ac <MX_GPIO_Init+0x2b0>)
 80008e0:	f000 fac0 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f6:	2306      	movs	r3, #6
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4829      	ldr	r0, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0x2ac>)
 8000902:	f000 faaf 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4825      	ldr	r0, [pc, #148]	@ (80009b0 <MX_GPIO_Init+0x2b4>)
 800091c:	f000 faa2 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000920:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000932:	230a      	movs	r3, #10
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	481c      	ldr	r0, [pc, #112]	@ (80009b0 <MX_GPIO_Init+0x2b4>)
 800093e:	f000 fa91 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4815      	ldr	r0, [pc, #84]	@ (80009ac <MX_GPIO_Init+0x2b0>)
 8000956:	f000 fa85 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800095a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096c:	2304      	movs	r3, #4
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	480f      	ldr	r0, [pc, #60]	@ (80009b4 <MX_GPIO_Init+0x2b8>)
 8000978:	f000 fa74 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000980:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_GPIO_Init+0x2a8>)
 8000992:	f000 fa67 	bl	8000e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	@ 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400

080009b8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <task2_handler>:

static void task2_handler(void* parameters)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009f2:	f000 f935 	bl	8000c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40001000 	.word	0x40001000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b33      	ldr	r3, [pc, #204]	@ (8000b44 <HAL_InitTick+0xe4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a32      	ldr	r2, [pc, #200]	@ (8000b44 <HAL_InitTick+0xe4>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a80:	4b30      	ldr	r3, [pc, #192]	@ (8000b44 <HAL_InitTick+0xe4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f003 0310 	and.w	r3, r3, #16
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a8c:	f107 0210 	add.w	r2, r7, #16
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f81e 	bl	8001ad8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d103      	bne.n	8000aae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa6:	f001 f803 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 8000aaa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aac:	e004      	b.n	8000ab8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aae:	f000 ffff 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aba:	4a23      	ldr	r2, [pc, #140]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	0c9b      	lsrs	r3, r3, #18
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <HAL_InitTick+0xec>)
 8000ac8:	4a21      	ldr	r2, [pc, #132]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000aca:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <HAL_InitTick+0xec>)
 8000ace:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ad2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b4c <HAL_InitTick+0xec>)
 8000ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_InitTick+0xec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <HAL_InitTick+0xec>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HAL_InitTick+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000aec:	4817      	ldr	r0, [pc, #92]	@ (8000b4c <HAL_InitTick+0xec>)
 8000aee:	f001 f825 	bl	8001b3c <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000af8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d11b      	bne.n	8000b38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b00:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <HAL_InitTick+0xec>)
 8000b02:	f001 f875 	bl	8001bf0 <HAL_TIM_Base_Start_IT>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d111      	bne.n	8000b38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b14:	2036      	movs	r0, #54	@ 0x36
 8000b16:	f000 f997 	bl	8000e48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d808      	bhi.n	8000b32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2036      	movs	r0, #54	@ 0x36
 8000b26:	f000 f973 	bl	8000e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <HAL_InitTick+0xf4>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e002      	b.n	8000b38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3738      	adds	r7, #56	@ 0x38
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	431bde83 	.word	0x431bde83
 8000b4c:	2000002c 	.word	0x2000002c
 8000b50:	40001000 	.word	0x40001000
 8000b54:	20000004 	.word	0x20000004

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <TIM6_DAC_IRQHandler+0x10>)
 8000b96:	f001 f89b 	bl	8001cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000002c 	.word	0x2000002c

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f003 fd83 	bl	8004700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fcc9 	bl	8000590 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c0c:	08004868 	.word	0x08004868
  ldr r2, =_sbss
 8000c10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c14:	2001980c 	.word	0x2001980c

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f8d8 	bl	8000dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ff08 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fede 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000074 	.word	0x20000074

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000074 	.word	0x20000074

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	@ (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	@ (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	@ (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	@ 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff4c 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e22:	f7ff ff61 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	6978      	ldr	r0, [r7, #20]
 8000e2e:	f7ff ffb1 	bl	8000d94 <NVIC_EncodePriority>
 8000e32:	4602      	mov	r2, r0
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff80 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff54 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e16b      	b.n	8001158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 815a 	bne.w	8001152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d005      	beq.n	8000eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80b4 	beq.w	8001152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b60      	ldr	r3, [pc, #384]	@ (8001170 <HAL_GPIO_Init+0x30c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8001170 <HAL_GPIO_Init+0x30c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8001170 <HAL_GPIO_Init+0x30c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a5b      	ldr	r2, [pc, #364]	@ (8001174 <HAL_GPIO_Init+0x310>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a52      	ldr	r2, [pc, #328]	@ (8001178 <HAL_GPIO_Init+0x314>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d02b      	beq.n	800108a <HAL_GPIO_Init+0x226>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a51      	ldr	r2, [pc, #324]	@ (800117c <HAL_GPIO_Init+0x318>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d025      	beq.n	8001086 <HAL_GPIO_Init+0x222>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a50      	ldr	r2, [pc, #320]	@ (8001180 <HAL_GPIO_Init+0x31c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01f      	beq.n	8001082 <HAL_GPIO_Init+0x21e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4f      	ldr	r2, [pc, #316]	@ (8001184 <HAL_GPIO_Init+0x320>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x21a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4e      	ldr	r2, [pc, #312]	@ (8001188 <HAL_GPIO_Init+0x324>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x216>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4d      	ldr	r2, [pc, #308]	@ (800118c <HAL_GPIO_Init+0x328>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x212>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4c      	ldr	r2, [pc, #304]	@ (8001190 <HAL_GPIO_Init+0x32c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x20e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4b      	ldr	r2, [pc, #300]	@ (8001194 <HAL_GPIO_Init+0x330>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x20a>
 800106a:	2307      	movs	r3, #7
 800106c:	e00e      	b.n	800108c <HAL_GPIO_Init+0x228>
 800106e:	2308      	movs	r3, #8
 8001070:	e00c      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001072:	2306      	movs	r3, #6
 8001074:	e00a      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001076:	2305      	movs	r3, #5
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x228>
 800107a:	2304      	movs	r3, #4
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x228>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x228>
 800108a:	2300      	movs	r3, #0
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	4935      	ldr	r1, [pc, #212]	@ (8001174 <HAL_GPIO_Init+0x310>)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <HAL_GPIO_Init+0x334>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ce:	4a32      	ldr	r2, [pc, #200]	@ (8001198 <HAL_GPIO_Init+0x334>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d4:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <HAL_GPIO_Init+0x334>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <HAL_GPIO_Init+0x334>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <HAL_GPIO_Init+0x334>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001122:	4a1d      	ldr	r2, [pc, #116]	@ (8001198 <HAL_GPIO_Init+0x334>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_GPIO_Init+0x334>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114c:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <HAL_GPIO_Init+0x334>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f ae90 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3724      	adds	r7, #36	@ 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40013800 	.word	0x40013800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020400 	.word	0x40020400
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40021400 	.word	0x40021400
 8001190:	40021800 	.word	0x40021800
 8001194:	40021c00 	.word	0x40021c00
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e267      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ee:	4b88      	ldr	r3, [pc, #544]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00c      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4b85      	ldr	r3, [pc, #532]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001202:	2b08      	cmp	r3, #8
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b82      	ldr	r3, [pc, #520]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b7e      	ldr	r3, [pc, #504]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e242      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b76      	ldr	r3, [pc, #472]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a75      	ldr	r2, [pc, #468]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b70      	ldr	r3, [pc, #448]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6f      	ldr	r2, [pc, #444]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b6d      	ldr	r3, [pc, #436]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6c      	ldr	r2, [pc, #432]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b69      	ldr	r3, [pc, #420]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a68      	ldr	r2, [pc, #416]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b66      	ldr	r3, [pc, #408]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a65      	ldr	r2, [pc, #404]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fcfe 	bl	8000c88 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fcfa 	bl	8000c88 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	@ 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e207      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fcea 	bl	8000c88 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fce6 	bl	8000c88 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	@ 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1f3      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b51      	ldr	r3, [pc, #324]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d063      	beq.n	80013ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d11c      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b44      	ldr	r3, [pc, #272]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	4b41      	ldr	r3, [pc, #260]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1c7      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b3b      	ldr	r3, [pc, #236]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4937      	ldr	r1, [pc, #220]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	e03a      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	@ (8001414 <HAL_RCC_OscConfig+0x244>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fc9f 	bl	8000c88 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fc9b 	bl	8000c88 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1a8      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4925      	ldr	r1, [pc, #148]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_RCC_OscConfig+0x244>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc7e 	bl	8000c88 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fc7a 	bl	8000c88 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e187      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d036      	beq.n	8001428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_RCC_OscConfig+0x248>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fc5e 	bl	8000c88 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc5a 	bl	8000c88 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e167      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
 80013ee:	e01b      	b.n	8001428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_RCC_OscConfig+0x248>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fc47 	bl	8000c88 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	e00e      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc43 	bl	8000c88 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d907      	bls.n	800141c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e150      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001410:	40023800 	.word	0x40023800
 8001414:	42470000 	.word	0x42470000
 8001418:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b88      	ldr	r3, [pc, #544]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ea      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8097 	beq.w	8001564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b81      	ldr	r3, [pc, #516]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b7d      	ldr	r3, [pc, #500]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	4a7c      	ldr	r2, [pc, #496]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40
 8001456:	4b7a      	ldr	r3, [pc, #488]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b77      	ldr	r3, [pc, #476]	@ (8001644 <HAL_RCC_OscConfig+0x474>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b74      	ldr	r3, [pc, #464]	@ (8001644 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a73      	ldr	r2, [pc, #460]	@ (8001644 <HAL_RCC_OscConfig+0x474>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fc03 	bl	8000c88 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff fbff 	bl	8000c88 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e10c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b6a      	ldr	r3, [pc, #424]	@ (8001644 <HAL_RCC_OscConfig+0x474>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x2ea>
 80014ac:	4b64      	ldr	r3, [pc, #400]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b0:	4a63      	ldr	r2, [pc, #396]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x30c>
 80014c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014dc:	4b58      	ldr	r3, [pc, #352]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e0:	4a57      	ldr	r2, [pc, #348]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e8:	4b55      	ldr	r3, [pc, #340]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ec:	4a54      	ldr	r2, [pc, #336]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d015      	beq.n	8001528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fbc4 	bl	8000c88 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff fbc0 	bl	8000c88 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0cb      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	4b49      	ldr	r3, [pc, #292]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0ee      	beq.n	8001504 <HAL_RCC_OscConfig+0x334>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fbae 	bl	8000c88 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fbaa 	bl	8000c88 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0b5      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ee      	bne.n	8001530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	4a38      	ldr	r2, [pc, #224]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a1 	beq.w	80016b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156e:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d05c      	beq.n	8001634 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d141      	bne.n	8001606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <HAL_RCC_OscConfig+0x478>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fb7e 	bl	8000c88 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fb7a 	bl	8000c88 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e087      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	491b      	ldr	r1, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_RCC_OscConfig+0x478>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fb53 	bl	8000c88 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fb4f 	bl	8000c88 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e05c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x416>
 8001604:	e054      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb3c 	bl	8000c88 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb38 	bl	8000c88 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e045      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x444>
 8001632:	e03d      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e038      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000
 8001648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d028      	beq.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d121      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d11a      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800167c:	4013      	ands	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001684:	4293      	cmp	r3, r2
 8001686:	d111      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff fa6a 	bl	8000c88 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff fa66 	bl	8000c88 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	@ (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f8fa 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	08004820 	.word	0x08004820
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001890:	b094      	sub	sp, #80	@ 0x50
 8001892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a4:	4b79      	ldr	r3, [pc, #484]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d00d      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	f200 80e1 	bhi.w	8001a78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018be:	e0db      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b73      	ldr	r3, [pc, #460]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x204>)
 80018c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018c4:	e0db      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b73      	ldr	r3, [pc, #460]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x208>)
 80018c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018ca:	e0d8      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018cc:	4b6f      	ldr	r3, [pc, #444]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d063      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	2200      	movs	r2, #0
 80018ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018fe:	4622      	mov	r2, r4
 8001900:	462b      	mov	r3, r5
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4621      	mov	r1, r4
 8001918:	1a51      	subs	r1, r2, r1
 800191a:	6139      	str	r1, [r7, #16]
 800191c:	4629      	mov	r1, r5
 800191e:	eb63 0301 	sbc.w	r3, r3, r1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001930:	4659      	mov	r1, fp
 8001932:	018b      	lsls	r3, r1, #6
 8001934:	4651      	mov	r1, sl
 8001936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193a:	4651      	mov	r1, sl
 800193c:	018a      	lsls	r2, r1, #6
 800193e:	4651      	mov	r1, sl
 8001940:	ebb2 0801 	subs.w	r8, r2, r1
 8001944:	4659      	mov	r1, fp
 8001946:	eb63 0901 	sbc.w	r9, r3, r1
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800195a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800195e:	4690      	mov	r8, r2
 8001960:	4699      	mov	r9, r3
 8001962:	4623      	mov	r3, r4
 8001964:	eb18 0303 	adds.w	r3, r8, r3
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	462b      	mov	r3, r5
 800196c:	eb49 0303 	adc.w	r3, r9, r3
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800197e:	4629      	mov	r1, r5
 8001980:	024b      	lsls	r3, r1, #9
 8001982:	4621      	mov	r1, r4
 8001984:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001988:	4621      	mov	r1, r4
 800198a:	024a      	lsls	r2, r1, #9
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001992:	2200      	movs	r2, #0
 8001994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001998:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800199c:	f7fe fc62 	bl	8000264 <__aeabi_uldivmod>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4613      	mov	r3, r2
 80019a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019a8:	e058      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019aa:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	2200      	movs	r2, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	4611      	mov	r1, r2
 80019b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ba:	623b      	str	r3, [r7, #32]
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019c4:	4642      	mov	r2, r8
 80019c6:	464b      	mov	r3, r9
 80019c8:	f04f 0000 	mov.w	r0, #0
 80019cc:	f04f 0100 	mov.w	r1, #0
 80019d0:	0159      	lsls	r1, r3, #5
 80019d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d6:	0150      	lsls	r0, r2, #5
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4641      	mov	r1, r8
 80019de:	ebb2 0a01 	subs.w	sl, r2, r1
 80019e2:	4649      	mov	r1, r9
 80019e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019fc:	ebb2 040a 	subs.w	r4, r2, sl
 8001a00:	eb63 050b 	sbc.w	r5, r3, fp
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	00eb      	lsls	r3, r5, #3
 8001a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a12:	00e2      	lsls	r2, r4, #3
 8001a14:	4614      	mov	r4, r2
 8001a16:	461d      	mov	r5, r3
 8001a18:	4643      	mov	r3, r8
 8001a1a:	18e3      	adds	r3, r4, r3
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	464b      	mov	r3, r9
 8001a20:	eb45 0303 	adc.w	r3, r5, r3
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a32:	4629      	mov	r1, r5
 8001a34:	028b      	lsls	r3, r1, #10
 8001a36:	4621      	mov	r1, r4
 8001a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	028a      	lsls	r2, r1, #10
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a46:	2200      	movs	r2, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	61fa      	str	r2, [r7, #28]
 8001a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a50:	f7fe fc08 	bl	8000264 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	3301      	adds	r3, #1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a76:	e002      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3750      	adds	r7, #80	@ 0x50
 8001a84:	46bd      	mov	sp, r7
 8001a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	007a1200 	.word	0x007a1200

08001a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <HAL_RCC_GetHCLKFreq+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000000 	.word	0x20000000

08001ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab4:	f7ff fff0 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	0a9b      	lsrs	r3, r3, #10
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4903      	ldr	r1, [pc, #12]	@ (8001ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac6:	5ccb      	ldrb	r3, [r1, r3]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08004830 	.word	0x08004830

08001ad8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	08db      	lsrs	r3, r3, #3
 8001b12:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <HAL_RCC_GetClockConfig+0x60>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0207 	and.w	r2, r3, #7
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	601a      	str	r2, [r3, #0]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e041      	b.n	8001bd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f839 	bl	8001bda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3304      	adds	r3, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f000 f9c0 	bl	8001f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d001      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e04e      	b.n	8001ca6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a23      	ldr	r2, [pc, #140]	@ (8001cb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d022      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x80>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c32:	d01d      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x80>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d018      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x80>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1e      	ldr	r2, [pc, #120]	@ (8001cbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x80>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00e      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x80>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d009      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x80>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a19      	ldr	r2, [pc, #100]	@ (8001cc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d004      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x80>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ccc <HAL_TIM_Base_Start_IT+0xdc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d111      	bne.n	8001c94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d010      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c92:	e007      	b.n	8001ca4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40000800 	.word	0x40000800
 8001cc0:	40000c00 	.word	0x40000c00
 8001cc4:	40010400 	.word	0x40010400
 8001cc8:	40014000 	.word	0x40014000
 8001ccc:	40001800 	.word	0x40001800

08001cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d020      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0202 	mvn.w	r2, #2
 8001d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f8d2 	bl	8001ec4 <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8c4 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8d5 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d020      	beq.n	8001d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0204 	mvn.w	r2, #4
 8001d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8ac 	bl	8001ec4 <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f89e 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8af 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d020      	beq.n	8001dcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0208 	mvn.w	r2, #8
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f886 	bl	8001ec4 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f878 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f889 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d020      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01b      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0210 	mvn.w	r2, #16
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2208      	movs	r2, #8
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f860 	bl	8001ec4 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f852 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f863 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0201 	mvn.w	r2, #1
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fdd2 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00c      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f900 	bl	8002060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00c      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f834 	bl	8001eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8d2 	bl	800204c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a43      	ldr	r2, [pc, #268]	@ (8002020 <TIM_Base_SetConfig+0x120>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f1e:	d00f      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a40      	ldr	r2, [pc, #256]	@ (8002024 <TIM_Base_SetConfig+0x124>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00b      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002028 <TIM_Base_SetConfig+0x128>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3e      	ldr	r2, [pc, #248]	@ (800202c <TIM_Base_SetConfig+0x12c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8002030 <TIM_Base_SetConfig+0x130>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a32      	ldr	r2, [pc, #200]	@ (8002020 <TIM_Base_SetConfig+0x120>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f60:	d027      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2f      	ldr	r2, [pc, #188]	@ (8002024 <TIM_Base_SetConfig+0x124>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d023      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002028 <TIM_Base_SetConfig+0x128>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01f      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2d      	ldr	r2, [pc, #180]	@ (800202c <TIM_Base_SetConfig+0x12c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002030 <TIM_Base_SetConfig+0x130>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d017      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2b      	ldr	r2, [pc, #172]	@ (8002034 <TIM_Base_SetConfig+0x134>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002038 <TIM_Base_SetConfig+0x138>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00f      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a29      	ldr	r2, [pc, #164]	@ (800203c <TIM_Base_SetConfig+0x13c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a28      	ldr	r2, [pc, #160]	@ (8002040 <TIM_Base_SetConfig+0x140>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a27      	ldr	r2, [pc, #156]	@ (8002044 <TIM_Base_SetConfig+0x144>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a26      	ldr	r2, [pc, #152]	@ (8002048 <TIM_Base_SetConfig+0x148>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d108      	bne.n	8001fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <TIM_Base_SetConfig+0x120>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <TIM_Base_SetConfig+0xf2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a10      	ldr	r2, [pc, #64]	@ (8002030 <TIM_Base_SetConfig+0x130>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d103      	bne.n	8001ffa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f043 0204 	orr.w	r2, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	601a      	str	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40010000 	.word	0x40010000
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800
 800202c:	40000c00 	.word	0x40000c00
 8002030:	40010400 	.word	0x40010400
 8002034:	40014000 	.word	0x40014000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800
 8002040:	40001800 	.word	0x40001800
 8002044:	40001c00 	.word	0x40001c00
 8002048:	40002000 	.word	0x40002000

0800204c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f103 0208 	add.w	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f103 0208 	add.w	r2, r3, #8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f103 0208 	add.w	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80020a8:	f240 1019 	movw	r0, #281	@ 0x119
 80020ac:	f002 f858 	bl	8004160 <SEGGER_SYSVIEW_RecordEndCall>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80020c6:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80020ca:	f002 f849 	bl	8004160 <SEGGER_SYSVIEW_RecordEndCall>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b08a      	sub	sp, #40	@ 0x28
 80020da:	af04      	add	r7, sp, #16
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fd97 	bl	8002c1c <pvPortMalloc>
 80020ee:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d013      	beq.n	800211e <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80020f6:	2058      	movs	r0, #88	@ 0x58
 80020f8:	f000 fd90 	bl	8002c1c <pvPortMalloc>
 80020fc:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002104:	2258      	movs	r2, #88	@ 0x58
 8002106:	2100      	movs	r1, #0
 8002108:	6978      	ldr	r0, [r7, #20]
 800210a:	f002 faf1 	bl	80046f0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	631a      	str	r2, [r3, #48]	@ 0x30
 8002114:	e005      	b.n	8002122 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002116:	6938      	ldr	r0, [r7, #16]
 8002118:	f000 feb2 	bl	8002e80 <vPortFree>
 800211c:	e001      	b.n	8002122 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002128:	2300      	movs	r3, #0
 800212a:	9303      	str	r3, [sp, #12]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f82d 	bl	800219e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002144:	697b      	ldr	r3, [r7, #20]
    }
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800214e:	b580      	push	{r7, lr}
 8002150:	b088      	sub	sp, #32
 8002152:	af02      	add	r7, sp, #8
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff ffb3 	bl	80020d6 <prvCreateTask>
 8002170:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002178:	6938      	ldr	r0, [r7, #16]
 800217a:	f000 f8a1 	bl	80022c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800217e:	2301      	movs	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e002      	b.n	800218a <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4619      	mov	r1, r3
 800218e:	20c2      	movs	r0, #194	@ 0xc2
 8002190:	f002 f822 	bl	80041d8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002194:	697b      	ldr	r3, [r7, #20]
    }
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b088      	sub	sp, #32
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80021ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	461a      	mov	r2, r3
 80021b6:	21a5      	movs	r1, #165	@ 0xa5
 80021b8:	f002 fa9a 	bl	80046f0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80021bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021c6:	3b01      	subs	r3, #1
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f023 0307 	bic.w	r3, r3, #7
 80021d4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00b      	beq.n	80021f8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80021e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e4:	f383 8811 	msr	BASEPRI, r3
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	617b      	str	r3, [r7, #20]
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d01e      	beq.n	800223c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e012      	b.n	800222a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	7819      	ldrb	r1, [r3, #0]
 800220c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	3334      	adds	r3, #52	@ 0x34
 8002214:	460a      	mov	r2, r1
 8002216:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	2b09      	cmp	r3, #9
 800222e:	d9e9      	bls.n	8002204 <prvInitialiseNewTask+0x66>
 8002230:	e000      	b.n	8002234 <prvInitialiseNewTask+0x96>
            {
                break;
 8002232:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	2b04      	cmp	r3, #4
 8002240:	d90b      	bls.n	800225a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002246:	f383 8811 	msr	BASEPRI, r3
 800224a:	f3bf 8f6f 	isb	sy
 800224e:	f3bf 8f4f 	dsb	sy
 8002252:	613b      	str	r3, [r7, #16]
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	e7fd      	b.n	8002256 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800225a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225c:	2b04      	cmp	r3, #4
 800225e:	d901      	bls.n	8002264 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002260:	2304      	movs	r3, #4
 8002262:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002268:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800226a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800226e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002272:	3304      	adds	r3, #4
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff1f 	bl	80020b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	3318      	adds	r3, #24
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff1a 	bl	80020b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002288:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800228a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228c:	f1c3 0205 	rsb	r2, r3, #5
 8002290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002292:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002298:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	68f9      	ldr	r1, [r7, #12]
 800229e:	69b8      	ldr	r0, [r7, #24]
 80022a0:	f000 fb8a 	bl	80029b8 <pxPortInitialiseStack>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a8:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80022aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022b6:	bf00      	nop
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80022c8:	f000 fbee 	bl	8002aa8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80022cc:	4b48      	ldr	r3, [pc, #288]	@ (80023f0 <prvAddNewTaskToReadyList+0x130>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a47      	ldr	r2, [pc, #284]	@ (80023f0 <prvAddNewTaskToReadyList+0x130>)
 80022d4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80022d6:	4b47      	ldr	r3, [pc, #284]	@ (80023f4 <prvAddNewTaskToReadyList+0x134>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80022de:	4a45      	ldr	r2, [pc, #276]	@ (80023f4 <prvAddNewTaskToReadyList+0x134>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022e4:	4b42      	ldr	r3, [pc, #264]	@ (80023f0 <prvAddNewTaskToReadyList+0x130>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d110      	bne.n	800230e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80022ec:	f000 fb08 	bl	8002900 <prvInitialiseTaskLists>
 80022f0:	e00d      	b.n	800230e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80022f2:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <prvAddNewTaskToReadyList+0x138>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022fa:	4b3e      	ldr	r3, [pc, #248]	@ (80023f4 <prvAddNewTaskToReadyList+0x134>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	429a      	cmp	r2, r3
 8002306:	d802      	bhi.n	800230e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002308:	4a3a      	ldr	r2, [pc, #232]	@ (80023f4 <prvAddNewTaskToReadyList+0x134>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800230e:	4b3b      	ldr	r3, [pc, #236]	@ (80023fc <prvAddNewTaskToReadyList+0x13c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a39      	ldr	r2, [pc, #228]	@ (80023fc <prvAddNewTaskToReadyList+0x13c>)
 8002316:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002318:	4b38      	ldr	r3, [pc, #224]	@ (80023fc <prvAddNewTaskToReadyList+0x13c>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <prvAddNewTaskToReadyList+0x94>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	f001 ffc9 	bl	80042c0 <SEGGER_SYSVIEW_OnTaskCreate>
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	461d      	mov	r5, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461c      	mov	r4, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	1ae3      	subs	r3, r4, r3
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	462b      	mov	r3, r5
 8002350:	f000 fee0 	bl	8003114 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f002 f836 	bl	80043c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	2201      	movs	r2, #1
 8002362:	409a      	lsls	r2, r3
 8002364:	4b26      	ldr	r3, [pc, #152]	@ (8002400 <prvAddNewTaskToReadyList+0x140>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	4a25      	ldr	r2, [pc, #148]	@ (8002400 <prvAddNewTaskToReadyList+0x140>)
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002372:	4924      	ldr	r1, [pc, #144]	@ (8002404 <prvAddNewTaskToReadyList+0x144>)
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3304      	adds	r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	3204      	adds	r2, #4
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <prvAddNewTaskToReadyList+0x144>)
 80023b2:	441a      	add	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023bc:	4911      	ldr	r1, [pc, #68]	@ (8002404 <prvAddNewTaskToReadyList+0x144>)
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023ce:	1c59      	adds	r1, r3, #1
 80023d0:	480c      	ldr	r0, [pc, #48]	@ (8002404 <prvAddNewTaskToReadyList+0x144>)
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4403      	add	r3, r0
 80023dc:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80023de:	f000 fb95 	bl	8002b0c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80023e2:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <prvAddNewTaskToReadyList+0x138>)
 80023e4:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdb0      	pop	{r4, r5, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000014c 	.word	0x2000014c
 80023f4:	20000078 	.word	0x20000078
 80023f8:	20000158 	.word	0x20000158
 80023fc:	20000168 	.word	0x20000168
 8002400:	20000154 	.word	0x20000154
 8002404:	2000007c 	.word	0x2000007c

08002408 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800240c:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <vTaskSuspendAll+0x18>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a03      	ldr	r2, [pc, #12]	@ (8002420 <vTaskSuspendAll+0x18>)
 8002414:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002416:	20cf      	movs	r0, #207	@ 0xcf
 8002418:	f001 fea2 	bl	8004160 <SEGGER_SYSVIEW_RecordEndCall>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000174 	.word	0x20000174

08002424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002432:	f000 fb39 	bl	8002aa8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800243a:	4b73      	ldr	r3, [pc, #460]	@ (8002608 <xTaskResumeAll+0x1e4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10b      	bne.n	800245a <xTaskResumeAll+0x36>
    __asm volatile
 8002442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	603b      	str	r3, [r7, #0]
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	e7fd      	b.n	8002456 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800245a:	4b6b      	ldr	r3, [pc, #428]	@ (8002608 <xTaskResumeAll+0x1e4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3b01      	subs	r3, #1
 8002460:	4a69      	ldr	r2, [pc, #420]	@ (8002608 <xTaskResumeAll+0x1e4>)
 8002462:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002464:	4b68      	ldr	r3, [pc, #416]	@ (8002608 <xTaskResumeAll+0x1e4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 80c0 	bne.w	80025ee <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800246e:	4b67      	ldr	r3, [pc, #412]	@ (800260c <xTaskResumeAll+0x1e8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80bb 	beq.w	80025ee <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002478:	e092      	b.n	80025a0 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800247a:	4b65      	ldr	r3, [pc, #404]	@ (8002610 <xTaskResumeAll+0x1ec>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	6a12      	ldr	r2, [r2, #32]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	69d2      	ldr	r2, [r2, #28]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3318      	adds	r3, #24
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d103      	bne.n	80024b0 <xTaskResumeAll+0x8c>
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	68d2      	ldr	r2, [r2, #12]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	6892      	ldr	r2, [r2, #8]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d103      	bne.n	80024ee <xTaskResumeAll+0xca>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2200      	movs	r2, #0
 80024f2:	615a      	str	r2, [r3, #20]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4618      	mov	r0, r3
 8002502:	f001 ff61 	bl	80043c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	2201      	movs	r2, #1
 800250c:	409a      	lsls	r2, r3
 800250e:	4b41      	ldr	r3, [pc, #260]	@ (8002614 <xTaskResumeAll+0x1f0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	4a3f      	ldr	r2, [pc, #252]	@ (8002614 <xTaskResumeAll+0x1f0>)
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800251c:	493e      	ldr	r1, [pc, #248]	@ (8002618 <xTaskResumeAll+0x1f4>)
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	3304      	adds	r3, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	3204      	adds	r2, #4
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	1d1a      	adds	r2, r3, #4
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4a2f      	ldr	r2, [pc, #188]	@ (8002618 <xTaskResumeAll+0x1f4>)
 800255c:	441a      	add	r2, r3
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	615a      	str	r2, [r3, #20]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002566:	492c      	ldr	r1, [pc, #176]	@ (8002618 <xTaskResumeAll+0x1f4>)
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002578:	1c59      	adds	r1, r3, #1
 800257a:	4827      	ldr	r0, [pc, #156]	@ (8002618 <xTaskResumeAll+0x1f4>)
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4403      	add	r3, r0
 8002586:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800258c:	4b23      	ldr	r3, [pc, #140]	@ (800261c <xTaskResumeAll+0x1f8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002592:	429a      	cmp	r2, r3
 8002594:	d904      	bls.n	80025a0 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002596:	4a22      	ldr	r2, [pc, #136]	@ (8002620 <xTaskResumeAll+0x1fc>)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2101      	movs	r1, #1
 800259c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <xTaskResumeAll+0x1ec>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f47f af68 	bne.w	800247a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80025b0:	f000 f9e6 	bl	8002980 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <xTaskResumeAll+0x200>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d012      	beq.n	80025e6 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80025c0:	f000 f832 	bl	8002628 <xTaskIncrementTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80025ca:	4a15      	ldr	r2, [pc, #84]	@ (8002620 <xTaskResumeAll+0x1fc>)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2101      	movs	r1, #1
 80025d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ef      	bne.n	80025c0 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <xTaskResumeAll+0x200>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80025e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <xTaskResumeAll+0x1fc>)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80025ee:	f000 fa8d 	bl	8002b0c <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	4619      	mov	r1, r3
 80025f6:	20d0      	movs	r0, #208	@ 0xd0
 80025f8:	f001 fdee 	bl	80041d8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80025fc:	697b      	ldr	r3, [r7, #20]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000174 	.word	0x20000174
 800260c:	2000014c 	.word	0x2000014c
 8002610:	20000110 	.word	0x20000110
 8002614:	20000154 	.word	0x20000154
 8002618:	2000007c 	.word	0x2000007c
 800261c:	20000078 	.word	0x20000078
 8002620:	20000160 	.word	0x20000160
 8002624:	2000015c 	.word	0x2000015c

08002628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002632:	4b74      	ldr	r3, [pc, #464]	@ (8002804 <xTaskIncrementTick+0x1dc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 80d4 	bne.w	80027e4 <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800263c:	4b72      	ldr	r3, [pc, #456]	@ (8002808 <xTaskIncrementTick+0x1e0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002644:	4a70      	ldr	r2, [pc, #448]	@ (8002808 <xTaskIncrementTick+0x1e0>)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d121      	bne.n	8002694 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002650:	4b6e      	ldr	r3, [pc, #440]	@ (800280c <xTaskIncrementTick+0x1e4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <xTaskIncrementTick+0x4a>
    __asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	607b      	str	r3, [r7, #4]
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	e7fd      	b.n	800266e <xTaskIncrementTick+0x46>
 8002672:	4b66      	ldr	r3, [pc, #408]	@ (800280c <xTaskIncrementTick+0x1e4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	4b65      	ldr	r3, [pc, #404]	@ (8002810 <xTaskIncrementTick+0x1e8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a63      	ldr	r2, [pc, #396]	@ (800280c <xTaskIncrementTick+0x1e4>)
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4a63      	ldr	r2, [pc, #396]	@ (8002810 <xTaskIncrementTick+0x1e8>)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b63      	ldr	r3, [pc, #396]	@ (8002814 <xTaskIncrementTick+0x1ec>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	4a61      	ldr	r2, [pc, #388]	@ (8002814 <xTaskIncrementTick+0x1ec>)
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	f000 f976 	bl	8002980 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002694:	4b60      	ldr	r3, [pc, #384]	@ (8002818 <xTaskIncrementTick+0x1f0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	429a      	cmp	r2, r3
 800269c:	f0c0 80a7 	bcc.w	80027ee <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026a0:	4b5a      	ldr	r3, [pc, #360]	@ (800280c <xTaskIncrementTick+0x1e4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d104      	bne.n	80026b4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80026aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002818 <xTaskIncrementTick+0x1f0>)
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	601a      	str	r2, [r3, #0]
                    break;
 80026b2:	e09c      	b.n	80027ee <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026b4:	4b55      	ldr	r3, [pc, #340]	@ (800280c <xTaskIncrementTick+0x1e4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80026c4:	6a3a      	ldr	r2, [r7, #32]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d203      	bcs.n	80026d4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026cc:	4a52      	ldr	r2, [pc, #328]	@ (8002818 <xTaskIncrementTick+0x1f0>)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	6013      	str	r3, [r2, #0]
                        break;
 80026d2:	e08c      	b.n	80027ee <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	6892      	ldr	r2, [r2, #8]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3304      	adds	r3, #4
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d103      	bne.n	8002702 <xTaskIncrementTick+0xda>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2200      	movs	r2, #0
 8002706:	615a      	str	r2, [r3, #20]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01e      	beq.n	8002758 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	6a12      	ldr	r2, [r2, #32]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	69d2      	ldr	r2, [r2, #28]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	3318      	adds	r3, #24
 800273c:	429a      	cmp	r2, r3
 800273e:	d103      	bne.n	8002748 <xTaskIncrementTick+0x120>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2200      	movs	r2, #0
 800274c:	629a      	str	r2, [r3, #40]	@ 0x28
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	1e5a      	subs	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4618      	mov	r0, r3
 800275c:	f001 fe34 	bl	80043c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	2201      	movs	r2, #1
 8002766:	409a      	lsls	r2, r3
 8002768:	4b2c      	ldr	r3, [pc, #176]	@ (800281c <xTaskIncrementTick+0x1f4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4313      	orrs	r3, r2
 800276e:	4a2b      	ldr	r2, [pc, #172]	@ (800281c <xTaskIncrementTick+0x1f4>)
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002776:	492a      	ldr	r1, [pc, #168]	@ (8002820 <xTaskIncrementTick+0x1f8>)
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3304      	adds	r3, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	3204      	adds	r2, #4
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1d1a      	adds	r2, r3, #4
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002820 <xTaskIncrementTick+0x1f8>)
 80027b6:	441a      	add	r2, r3
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	615a      	str	r2, [r3, #20]
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c0:	4917      	ldr	r1, [pc, #92]	@ (8002820 <xTaskIncrementTick+0x1f8>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027d2:	1c59      	adds	r1, r3, #1
 80027d4:	4812      	ldr	r0, [pc, #72]	@ (8002820 <xTaskIncrementTick+0x1f8>)
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4403      	add	r3, r0
 80027e0:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027e2:	e75d      	b.n	80026a0 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <xTaskIncrementTick+0x1fc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002824 <xTaskIncrementTick+0x1fc>)
 80027ec:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	4619      	mov	r1, r3
 80027f2:	20db      	movs	r0, #219	@ 0xdb
 80027f4:	f001 fcf0 	bl	80041d8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3728      	adds	r7, #40	@ 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000174 	.word	0x20000174
 8002808:	20000150 	.word	0x20000150
 800280c:	20000108 	.word	0x20000108
 8002810:	2000010c 	.word	0x2000010c
 8002814:	20000164 	.word	0x20000164
 8002818:	2000016c 	.word	0x2000016c
 800281c:	20000154 	.word	0x20000154
 8002820:	2000007c 	.word	0x2000007c
 8002824:	2000015c 	.word	0x2000015c

08002828 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800282e:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <vTaskSwitchContext+0xc0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002836:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <vTaskSwitchContext+0xc4>)
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800283c:	e04f      	b.n	80028de <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 800283e:	4b2b      	ldr	r3, [pc, #172]	@ (80028ec <vTaskSwitchContext+0xc4>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002844:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <vTaskSwitchContext+0xc8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002852:	7afb      	ldrb	r3, [r7, #11]
 8002854:	f1c3 031f 	rsb	r3, r3, #31
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	4926      	ldr	r1, [pc, #152]	@ (80028f4 <vTaskSwitchContext+0xcc>)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10b      	bne.n	8002886 <vTaskSwitchContext+0x5e>
    __asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	607b      	str	r3, [r7, #4]
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	e7fd      	b.n	8002882 <vTaskSwitchContext+0x5a>
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4a18      	ldr	r2, [pc, #96]	@ (80028f4 <vTaskSwitchContext+0xcc>)
 8002892:	4413      	add	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	3308      	adds	r3, #8
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d103      	bne.n	80028b4 <vTaskSwitchContext+0x8c>
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a0f      	ldr	r2, [pc, #60]	@ (80028f8 <vTaskSwitchContext+0xd0>)
 80028bc:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80028be:	4b0f      	ldr	r3, [pc, #60]	@ (80028fc <vTaskSwitchContext+0xd4>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <vTaskSwitchContext+0xd0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d102      	bne.n	80028d0 <vTaskSwitchContext+0xa8>
 80028ca:	f001 fcdd 	bl	8004288 <SEGGER_SYSVIEW_OnIdle>
 80028ce:	e004      	b.n	80028da <vTaskSwitchContext+0xb2>
 80028d0:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <vTaskSwitchContext+0xd0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 fd35 	bl	8004344 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80028da:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <vTaskSwitchContext+0xd0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
    }
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000174 	.word	0x20000174
 80028ec:	20000160 	.word	0x20000160
 80028f0:	20000154 	.word	0x20000154
 80028f4:	2000007c 	.word	0x2000007c
 80028f8:	20000078 	.word	0x20000078
 80028fc:	20000170 	.word	0x20000170

08002900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	e00c      	b.n	8002926 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <prvInitialiseTaskLists+0x60>)
 8002918:	4413      	add	r3, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fbaa 	bl	8002074 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3301      	adds	r3, #1
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d9ef      	bls.n	800290c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800292c:	480d      	ldr	r0, [pc, #52]	@ (8002964 <prvInitialiseTaskLists+0x64>)
 800292e:	f7ff fba1 	bl	8002074 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002932:	480d      	ldr	r0, [pc, #52]	@ (8002968 <prvInitialiseTaskLists+0x68>)
 8002934:	f7ff fb9e 	bl	8002074 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <prvInitialiseTaskLists+0x6c>)
 800293a:	f7ff fb9b 	bl	8002074 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800293e:	480c      	ldr	r0, [pc, #48]	@ (8002970 <prvInitialiseTaskLists+0x70>)
 8002940:	f7ff fb98 	bl	8002074 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002944:	480b      	ldr	r0, [pc, #44]	@ (8002974 <prvInitialiseTaskLists+0x74>)
 8002946:	f7ff fb95 	bl	8002074 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <prvInitialiseTaskLists+0x78>)
 800294c:	4a05      	ldr	r2, [pc, #20]	@ (8002964 <prvInitialiseTaskLists+0x64>)
 800294e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002950:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <prvInitialiseTaskLists+0x7c>)
 8002952:	4a05      	ldr	r2, [pc, #20]	@ (8002968 <prvInitialiseTaskLists+0x68>)
 8002954:	601a      	str	r2, [r3, #0]
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000007c 	.word	0x2000007c
 8002964:	200000e0 	.word	0x200000e0
 8002968:	200000f4 	.word	0x200000f4
 800296c:	20000110 	.word	0x20000110
 8002970:	20000124 	.word	0x20000124
 8002974:	20000138 	.word	0x20000138
 8002978:	20000108 	.word	0x20000108
 800297c:	2000010c 	.word	0x2000010c

08002980 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002984:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <prvResetNextTaskUnblockTime+0x30>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d104      	bne.n	8002998 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <prvResetNextTaskUnblockTime+0x34>)
 8002990:	f04f 32ff 	mov.w	r2, #4294967295
 8002994:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002996:	e005      	b.n	80029a4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002998:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <prvResetNextTaskUnblockTime+0x30>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <prvResetNextTaskUnblockTime+0x34>)
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000108 	.word	0x20000108
 80029b4:	2000016c 	.word	0x2000016c

080029b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3b04      	subs	r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3b04      	subs	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f023 0201 	bic.w	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3b04      	subs	r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029e8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a1c <pxPortInitialiseStack+0x64>)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3b14      	subs	r3, #20
 80029f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3b04      	subs	r3, #4
 80029fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f06f 0202 	mvn.w	r2, #2
 8002a06:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3b20      	subs	r3, #32
 8002a0c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	08002a21 	.word	0x08002a21

08002a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a2a:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <prvTaskExitError+0x58>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d00b      	beq.n	8002a4c <prvTaskExitError+0x2c>
    __asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	60fb      	str	r3, [r7, #12]
}
 8002a46:	bf00      	nop
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <prvTaskExitError+0x28>
    __asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	60bb      	str	r3, [r7, #8]
}
 8002a5e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a60:	bf00      	nop
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0fc      	beq.n	8002a62 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	2000000c 	.word	0x2000000c
 8002a7c:	00000000 	.word	0x00000000

08002a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <pxCurrentTCBConst2>)
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	6808      	ldr	r0, [r1, #0]
 8002a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a8a:	f380 8809 	msr	PSP, r0
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f380 8811 	msr	BASEPRI, r0
 8002a9a:	4770      	bx	lr
 8002a9c:	f3af 8000 	nop.w

08002aa0 <pxCurrentTCBConst2>:
 8002aa0:	20000078 	.word	0x20000078
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop

08002aa8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
    __asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	607b      	str	r3, [r7, #4]
}
 8002ac0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <vPortEnterCritical+0x5c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b04 <vPortEnterCritical+0x5c>)
 8002aca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002acc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <vPortEnterCritical+0x5c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d110      	bne.n	8002af6 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <vPortEnterCritical+0x60>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <vPortEnterCritical+0x4e>
    __asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	603b      	str	r3, [r7, #0]
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	e7fd      	b.n	8002af2 <vPortEnterCritical+0x4a>
    }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	2000000c 	.word	0x2000000c
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <vPortExitCritical+0x50>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10b      	bne.n	8002b32 <vPortExitCritical+0x26>
    __asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	607b      	str	r3, [r7, #4]
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	e7fd      	b.n	8002b2e <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <vPortExitCritical+0x50>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <vPortExitCritical+0x50>)
 8002b3a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002b3c:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <vPortExitCritical+0x50>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <vPortExitCritical+0x44>
 8002b44:	2300      	movs	r3, #0
 8002b46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002b4e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b60:	f3ef 8009 	mrs	r0, PSP
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <pxCurrentTCBConst>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	f01e 0f10 	tst.w	lr, #16
 8002b70:	bf08      	it	eq
 8002b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7a:	6010      	str	r0, [r2, #0]
 8002b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b84:	f380 8811 	msr	BASEPRI, r0
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f7ff fe4a 	bl	8002828 <vTaskSwitchContext>
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f380 8811 	msr	BASEPRI, r0
 8002b9c:	bc09      	pop	{r0, r3}
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	6808      	ldr	r0, [r1, #0]
 8002ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba6:	f01e 0f10 	tst.w	lr, #16
 8002baa:	bf08      	it	eq
 8002bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002bb0:	f380 8809 	msr	PSP, r0
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w

08002bc0 <pxCurrentTCBConst>:
 8002bc0:	20000078 	.word	0x20000078
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop

08002bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
    __asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	607b      	str	r3, [r7, #4]
}
 8002be0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8002be2:	f001 fa43 	bl	800406c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002be6:	f7ff fd1f 	bl	8002628 <xTaskIncrementTick>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8002bf0:	f001 fa9a 	bl	8004128 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <SysTick_Handler+0x50>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e001      	b.n	8002c02 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8002bfe:	f001 fa77 	bl	80040f0 <SEGGER_SYSVIEW_RecordExitISR>
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f383 8811 	msr	BASEPRI, r3
}
 8002c0c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	@ 0x38
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d022      	beq.n	8002c74 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002c2e:	2308      	movs	r3, #8
 8002c30:	43db      	mvns	r3, r3
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d81b      	bhi.n	8002c70 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002c38:	2208      	movs	r2, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d014      	beq.n	8002c74 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	f1c3 0308 	rsb	r3, r3, #8
 8002c54:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d804      	bhi.n	8002c6a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c64:	4413      	add	r3, r2
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	e004      	b.n	8002c74 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	e001      	b.n	8002c74 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002c74:	f7ff fbc8 	bl	8002408 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c78:	4b7a      	ldr	r3, [pc, #488]	@ (8002e64 <pvPortMalloc+0x248>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002c80:	f000 f974 	bl	8002f6c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f2c0 80d3 	blt.w	8002e32 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80cf 	beq.w	8002e32 <pvPortMalloc+0x216>
 8002c94:	4b74      	ldr	r3, [pc, #464]	@ (8002e68 <pvPortMalloc+0x24c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	f200 80c9 	bhi.w	8002e32 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ca0:	4b72      	ldr	r3, [pc, #456]	@ (8002e6c <pvPortMalloc+0x250>)
 8002ca2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002ca4:	4b71      	ldr	r3, [pc, #452]	@ (8002e6c <pvPortMalloc+0x250>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cac:	4a70      	ldr	r2, [pc, #448]	@ (8002e70 <pvPortMalloc+0x254>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d305      	bcc.n	8002cbe <pvPortMalloc+0xa2>
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb4:	4a6f      	ldr	r2, [pc, #444]	@ (8002e74 <pvPortMalloc+0x258>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d801      	bhi.n	8002cbe <pvPortMalloc+0xa2>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <pvPortMalloc+0xa4>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d129      	bne.n	8002d18 <pvPortMalloc+0xfc>
    __asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	623b      	str	r3, [r7, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cde:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce8:	4a61      	ldr	r2, [pc, #388]	@ (8002e70 <pvPortMalloc+0x254>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d305      	bcc.n	8002cfa <pvPortMalloc+0xde>
 8002cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf0:	4a60      	ldr	r2, [pc, #384]	@ (8002e74 <pvPortMalloc+0x258>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d801      	bhi.n	8002cfa <pvPortMalloc+0xde>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <pvPortMalloc+0xe0>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <pvPortMalloc+0xfc>
    __asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	61fb      	str	r3, [r7, #28]
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d903      	bls.n	8002d2a <pvPortMalloc+0x10e>
 8002d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1d8      	bne.n	8002cdc <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e64 <pvPortMalloc+0x248>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d07e      	beq.n	8002e32 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2208      	movs	r2, #8
 8002d3a:	4413      	add	r3, r2
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d40:	4a4b      	ldr	r2, [pc, #300]	@ (8002e70 <pvPortMalloc+0x254>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d305      	bcc.n	8002d52 <pvPortMalloc+0x136>
 8002d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d48:	4a4a      	ldr	r2, [pc, #296]	@ (8002e74 <pvPortMalloc+0x258>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d801      	bhi.n	8002d52 <pvPortMalloc+0x136>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <pvPortMalloc+0x138>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <pvPortMalloc+0x154>
    __asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61bb      	str	r3, [r7, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d76:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d90b      	bls.n	8002d9a <pvPortMalloc+0x17e>
    __asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	617b      	str	r3, [r7, #20]
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	e7fd      	b.n	8002d96 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	1ad2      	subs	r2, r2, r3
 8002da2:	2308      	movs	r3, #8
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d924      	bls.n	8002df4 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002daa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00b      	beq.n	8002dd4 <pvPortMalloc+0x1b8>
    __asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	613b      	str	r3, [r7, #16]
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	1ad2      	subs	r2, r2, r3
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df2:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002df4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <pvPortMalloc+0x24c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e68 <pvPortMalloc+0x24c>)
 8002e00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e02:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <pvPortMalloc+0x24c>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b1c      	ldr	r3, [pc, #112]	@ (8002e78 <pvPortMalloc+0x25c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d203      	bcs.n	8002e16 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <pvPortMalloc+0x24c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a19      	ldr	r2, [pc, #100]	@ (8002e78 <pvPortMalloc+0x25c>)
 8002e14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e20:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e28:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <pvPortMalloc+0x260>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <pvPortMalloc+0x260>)
 8002e30:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e32:	f7ff faf7 	bl	8002424 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <pvPortMalloc+0x23c>
    __asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	60fb      	str	r3, [r7, #12]
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <pvPortMalloc+0x238>
    return pvReturn;
 8002e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3738      	adds	r7, #56	@ 0x38
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20019180 	.word	0x20019180
 8002e68:	20019184 	.word	0x20019184
 8002e6c:	20019178 	.word	0x20019178
 8002e70:	20000178 	.word	0x20000178
 8002e74:	20019177 	.word	0x20019177
 8002e78:	20019188 	.word	0x20019188
 8002e7c:	2001918c 	.word	0x2001918c

08002e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d060      	beq.n	8002f54 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002e92:	2308      	movs	r3, #8
 8002e94:	425b      	negs	r3, r3
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8002f5c <vPortFree+0xdc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d305      	bcc.n	8002eb4 <vPortFree+0x34>
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8002f60 <vPortFree+0xe0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d801      	bhi.n	8002eb4 <vPortFree+0x34>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <vPortFree+0x36>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <vPortFree+0x52>
    __asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	617b      	str	r3, [r7, #20]
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	e7fd      	b.n	8002ece <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <vPortFree+0x72>
    __asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	613b      	str	r3, [r7, #16]
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	e7fd      	b.n	8002eee <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <vPortFree+0x92>
    __asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	60fb      	str	r3, [r7, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	e7fd      	b.n	8002f0e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da1c      	bge.n	8002f54 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8002f2e:	f7ff fa6b 	bl	8002408 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <vPortFree+0xe4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a09      	ldr	r2, [pc, #36]	@ (8002f64 <vPortFree+0xe4>)
 8002f3e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f40:	69b8      	ldr	r0, [r7, #24]
 8002f42:	f000 f86d 	bl	8003020 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f46:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <vPortFree+0xe8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	4a06      	ldr	r2, [pc, #24]	@ (8002f68 <vPortFree+0xe8>)
 8002f4e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f50:	f7ff fa68 	bl	8002424 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f54:	bf00      	nop
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000178 	.word	0x20000178
 8002f60:	20019177 	.word	0x20019177
 8002f64:	20019184 	.word	0x20019184
 8002f68:	20019190 	.word	0x20019190

08002f6c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f72:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8002f76:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f78:	4b24      	ldr	r3, [pc, #144]	@ (800300c <prvHeapInit+0xa0>)
 8002f7a:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00c      	beq.n	8002fa0 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3307      	adds	r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800300c <prvHeapInit+0xa0>)
 8002f9c:	4413      	add	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <prvHeapInit+0xa4>)
 8002fa4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <prvHeapInit+0xa4>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f023 0307 	bic.w	r3, r3, #7
 8002fc2:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a13      	ldr	r2, [pc, #76]	@ (8003014 <prvHeapInit+0xa8>)
 8002fc8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002fca:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <prvHeapInit+0xa8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <prvHeapInit+0xa8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	1ad2      	subs	r2, r2, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <prvHeapInit+0xa8>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <prvHeapInit+0xac>)
 8002ff6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	@ (800301c <prvHeapInit+0xb0>)
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	20000178 	.word	0x20000178
 8003010:	20019178 	.word	0x20019178
 8003014:	20019180 	.word	0x20019180
 8003018:	20019188 	.word	0x20019188
 800301c:	20019184 	.word	0x20019184

08003020 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003028:	4b36      	ldr	r3, [pc, #216]	@ (8003104 <prvInsertBlockIntoFreeList+0xe4>)
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e002      	b.n	8003034 <prvInsertBlockIntoFreeList+0x14>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d8f7      	bhi.n	800302e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a30      	ldr	r2, [pc, #192]	@ (8003104 <prvInsertBlockIntoFreeList+0xe4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d018      	beq.n	8003078 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	4a2f      	ldr	r2, [pc, #188]	@ (8003108 <prvInsertBlockIntoFreeList+0xe8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d305      	bcc.n	800305a <prvInsertBlockIntoFreeList+0x3a>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	4a2e      	ldr	r2, [pc, #184]	@ (800310c <prvInsertBlockIntoFreeList+0xec>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d801      	bhi.n	800305a <prvInsertBlockIntoFreeList+0x3a>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <prvInsertBlockIntoFreeList+0x3c>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	60fb      	str	r3, [r7, #12]
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d108      	bne.n	800309c <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	441a      	add	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	441a      	add	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d118      	bne.n	80030e2 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b16      	ldr	r3, [pc, #88]	@ (8003110 <prvInsertBlockIntoFreeList+0xf0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d00d      	beq.n	80030d8 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	441a      	add	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e008      	b.n	80030ea <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80030d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <prvInsertBlockIntoFreeList+0xf0>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e003      	b.n	80030ea <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d002      	beq.n	80030f8 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	20019178 	.word	0x20019178
 8003108:	20000178 	.word	0x20000178
 800310c:	20019177 	.word	0x20019177
 8003110:	20019180 	.word	0x20019180

08003114 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003122:	2205      	movs	r2, #5
 8003124:	492b      	ldr	r1, [pc, #172]	@ (80031d4 <SYSVIEW_AddTask+0xc0>)
 8003126:	68b8      	ldr	r0, [r7, #8]
 8003128:	f001 fad2 	bl	80046d0 <memcmp>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d04b      	beq.n	80031ca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003132:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <SYSVIEW_AddTask+0xc4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b07      	cmp	r3, #7
 8003138:	d903      	bls.n	8003142 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800313a:	4828      	ldr	r0, [pc, #160]	@ (80031dc <SYSVIEW_AddTask+0xc8>)
 800313c:	f001 fa6c 	bl	8004618 <SEGGER_SYSVIEW_Warn>
    return;
 8003140:	e044      	b.n	80031cc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003142:	4b25      	ldr	r3, [pc, #148]	@ (80031d8 <SYSVIEW_AddTask+0xc4>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4926      	ldr	r1, [pc, #152]	@ (80031e0 <SYSVIEW_AddTask+0xcc>)
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003156:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <SYSVIEW_AddTask+0xc4>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4921      	ldr	r1, [pc, #132]	@ (80031e0 <SYSVIEW_AddTask+0xcc>)
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3304      	adds	r3, #4
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800316c:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <SYSVIEW_AddTask+0xc4>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	491b      	ldr	r1, [pc, #108]	@ (80031e0 <SYSVIEW_AddTask+0xcc>)
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3308      	adds	r3, #8
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <SYSVIEW_AddTask+0xc4>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4916      	ldr	r1, [pc, #88]	@ (80031e0 <SYSVIEW_AddTask+0xcc>)
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	330c      	adds	r3, #12
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003198:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <SYSVIEW_AddTask+0xc4>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4910      	ldr	r1, [pc, #64]	@ (80031e0 <SYSVIEW_AddTask+0xcc>)
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3310      	adds	r3, #16
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80031ae:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <SYSVIEW_AddTask+0xc4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	4a08      	ldr	r2, [pc, #32]	@ (80031d8 <SYSVIEW_AddTask+0xc4>)
 80031b6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f80e 	bl	80031e4 <SYSVIEW_SendTaskInfo>
 80031c8:	e000      	b.n	80031cc <SYSVIEW_AddTask+0xb8>
    return;
 80031ca:	bf00      	nop

}
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	080047bc 	.word	0x080047bc
 80031d8:	20019234 	.word	0x20019234
 80031dc:	080047c4 	.word	0x080047c4
 80031e0:	20019194 	.word	0x20019194

080031e4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	@ 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80031f2:	f107 0310 	add.w	r3, r7, #16
 80031f6:	2218      	movs	r2, #24
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 fa78 	bl	80046f0 <memset>
  TaskInfo.TaskID     = TaskID;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003214:	f107 0310 	add.w	r3, r7, #16
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fdfd 	bl	8003e18 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800321e:	bf00      	nop
 8003220:	3728      	adds	r7, #40	@ 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800322e:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <USART2_IRQHandler+0x80>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d011      	beq.n	8003262 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800323e:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <USART2_IRQHandler+0x84>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f003 030b 	and.w	r3, r3, #11
 800324c:	2b00      	cmp	r3, #0
 800324e:	d108      	bne.n	8003262 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003250:	4b17      	ldr	r3, [pc, #92]	@ (80032b0 <USART2_IRQHandler+0x88>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003258:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <USART2_IRQHandler+0x88>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	79fa      	ldrb	r2, [r7, #7]
 800325e:	4610      	mov	r0, r2
 8003260:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01a      	beq.n	80032a2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <USART2_IRQHandler+0x8c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d015      	beq.n	80032a0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003274:	4b0f      	ldr	r3, [pc, #60]	@ (80032b4 <USART2_IRQHandler+0x8c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	1dfa      	adds	r2, r7, #7
 800327a:	4610      	mov	r0, r2
 800327c:	4798      	blx	r3
 800327e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003286:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <USART2_IRQHandler+0x90>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a0b      	ldr	r2, [pc, #44]	@ (80032b8 <USART2_IRQHandler+0x90>)
 800328c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e006      	b.n	80032a2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <USART2_IRQHandler+0x80>)
 8003296:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003298:	79fa      	ldrb	r2, [r7, #7]
 800329a:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <USART2_IRQHandler+0x84>)
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e000      	b.n	80032a2 <USART2_IRQHandler+0x7a>
      return;
 80032a0:	bf00      	nop
    }
  }
}
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40004400 	.word	0x40004400
 80032ac:	40004404 	.word	0x40004404
 80032b0:	20019238 	.word	0x20019238
 80032b4:	2001923c 	.word	0x2001923c
 80032b8:	4000440c 	.word	0x4000440c

080032bc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80032c0:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80032c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ca:	6013      	str	r3, [r2, #0]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	4000440c 	.word	0x4000440c

080032dc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80032e2:	4b26      	ldr	r3, [pc, #152]	@ (800337c <_DoInit+0xa0>)
 80032e4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80032e6:	22a8      	movs	r2, #168	@ 0xa8
 80032e8:	2100      	movs	r1, #0
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	f001 fa00 	bl	80046f0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2203      	movs	r2, #3
 80032f4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2203      	movs	r2, #3
 80032fa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4a20      	ldr	r2, [pc, #128]	@ (8003380 <_DoInit+0xa4>)
 8003300:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <_DoInit+0xa8>)
 8003306:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800330e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2200      	movs	r2, #0
 800331a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	4a16      	ldr	r2, [pc, #88]	@ (8003380 <_DoInit+0xa4>)
 8003326:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4a17      	ldr	r2, [pc, #92]	@ (8003388 <_DoInit+0xac>)
 800332c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2210      	movs	r2, #16
 8003332:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2200      	movs	r2, #0
 800333e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003346:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	e00c      	b.n	800336a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1c3 030f 	rsb	r3, r3, #15
 8003356:	4a0d      	ldr	r2, [pc, #52]	@ (800338c <_DoInit+0xb0>)
 8003358:	5cd1      	ldrb	r1, [r2, r3]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	460a      	mov	r2, r1
 8003362:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3301      	adds	r3, #1
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b0f      	cmp	r3, #15
 800336e:	d9ef      	bls.n	8003350 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003370:	f3bf 8f5f 	dmb	sy
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20019240 	.word	0x20019240
 8003380:	08004814 	.word	0x08004814
 8003384:	200192e8 	.word	0x200192e8
 8003388:	200196e8 	.word	0x200196e8
 800338c:	08004838 	.word	0x08004838

08003390 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	@ 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800339c:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <SEGGER_RTT_ReadNoLock+0x108>)
 800339e:	623b      	str	r3, [r7, #32]
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b53      	cmp	r3, #83	@ 0x53
 80033a8:	d001      	beq.n	80033ae <SEGGER_RTT_ReadNoLock+0x1e>
 80033aa:	f7ff ff97 	bl	80032dc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	3360      	adds	r3, #96	@ 0x60
 80033ba:	4a37      	ldr	r2, [pc, #220]	@ (8003498 <SEGGER_RTT_ReadNoLock+0x108>)
 80033bc:	4413      	add	r3, r2
 80033be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80033d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d92b      	bls.n	8003434 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4293      	cmp	r3, r2
 80033ec:	bf28      	it	cs
 80033ee:	4613      	movcs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f8:	4413      	add	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	6939      	ldr	r1, [r7, #16]
 8003400:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003402:	f001 f9a1 	bl	8004748 <memcpy>
    NumBytesRead += NumBytesRem;
 8003406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	4413      	add	r3, r2
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800340e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	4413      	add	r3, r2
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800341e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	4413      	add	r3, r2
 8003424:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800342c:	429a      	cmp	r2, r3
 800342e:	d101      	bne.n	8003434 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003430:	2300      	movs	r3, #0
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4293      	cmp	r3, r2
 8003442:	bf28      	it	cs
 8003444:	4613      	movcs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d019      	beq.n	8003482 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003454:	4413      	add	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	6939      	ldr	r1, [r7, #16]
 800345c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800345e:	f001 f973 	bl	8004748 <memcpy>
    NumBytesRead += NumBytesRem;
 8003462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4413      	add	r3, r2
 8003468:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800346a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	4413      	add	r3, r2
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800347a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	4413      	add	r3, r2
 8003480:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800348c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800348e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003490:	4618      	mov	r0, r3
 8003492:	3730      	adds	r7, #48	@ 0x30
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20019240 	.word	0x20019240

0800349c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	60fa      	str	r2, [r7, #12]
 80034b2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b80      	cmp	r3, #128	@ 0x80
 80034b8:	d90a      	bls.n	80034d0 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80034be:	e007      	b.n	80034d0 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	1c53      	adds	r3, r2, #1
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1c59      	adds	r1, r3, #1
 80034ca:	60f9      	str	r1, [r7, #12]
 80034cc:	7812      	ldrb	r2, [r2, #0]
 80034ce:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	1e5a      	subs	r2, r3, #1
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <_EncodeStr+0x46>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ee      	bne.n	80034c0 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3307      	adds	r3, #7
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800351a:	4b34      	ldr	r3, [pc, #208]	@ (80035ec <_HandleIncomingPacket+0xd8>)
 800351c:	7e1b      	ldrb	r3, [r3, #24]
 800351e:	4618      	mov	r0, r3
 8003520:	1cfb      	adds	r3, r7, #3
 8003522:	2201      	movs	r2, #1
 8003524:	4619      	mov	r1, r3
 8003526:	f7ff ff33 	bl	8003390 <SEGGER_RTT_ReadNoLock>
 800352a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d057      	beq.n	80035e2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	2b80      	cmp	r3, #128	@ 0x80
 8003536:	d031      	beq.n	800359c <_HandleIncomingPacket+0x88>
 8003538:	2b80      	cmp	r3, #128	@ 0x80
 800353a:	dc40      	bgt.n	80035be <_HandleIncomingPacket+0xaa>
 800353c:	2b07      	cmp	r3, #7
 800353e:	dc15      	bgt.n	800356c <_HandleIncomingPacket+0x58>
 8003540:	2b00      	cmp	r3, #0
 8003542:	dd3c      	ble.n	80035be <_HandleIncomingPacket+0xaa>
 8003544:	3b01      	subs	r3, #1
 8003546:	2b06      	cmp	r3, #6
 8003548:	d839      	bhi.n	80035be <_HandleIncomingPacket+0xaa>
 800354a:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <_HandleIncomingPacket+0x3c>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003573 	.word	0x08003573
 8003554:	08003579 	.word	0x08003579
 8003558:	0800357f 	.word	0x0800357f
 800355c:	08003585 	.word	0x08003585
 8003560:	0800358b 	.word	0x0800358b
 8003564:	08003591 	.word	0x08003591
 8003568:	08003597 	.word	0x08003597
 800356c:	2b7f      	cmp	r3, #127	@ 0x7f
 800356e:	d033      	beq.n	80035d8 <_HandleIncomingPacket+0xc4>
 8003570:	e025      	b.n	80035be <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003572:	f000 fad5 	bl	8003b20 <SEGGER_SYSVIEW_Start>
      break;
 8003576:	e034      	b.n	80035e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003578:	f000 fb8e 	bl	8003c98 <SEGGER_SYSVIEW_Stop>
      break;
 800357c:	e031      	b.n	80035e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800357e:	f000 fd43 	bl	8004008 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003582:	e02e      	b.n	80035e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003584:	f000 fd2c 	bl	8003fe0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003588:	e02b      	b.n	80035e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800358a:	f000 fbab 	bl	8003ce4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800358e:	e028      	b.n	80035e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003590:	f001 f804 	bl	800459c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003594:	e025      	b.n	80035e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003596:	f000 ffe3 	bl	8004560 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800359a:	e022      	b.n	80035e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800359c:	4b13      	ldr	r3, [pc, #76]	@ (80035ec <_HandleIncomingPacket+0xd8>)
 800359e:	7e1b      	ldrb	r3, [r3, #24]
 80035a0:	4618      	mov	r0, r3
 80035a2:	1cfb      	adds	r3, r7, #3
 80035a4:	2201      	movs	r2, #1
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7ff fef2 	bl	8003390 <SEGGER_RTT_ReadNoLock>
 80035ac:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff48 	bl	800444c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80035bc:	e00e      	b.n	80035dc <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da0c      	bge.n	80035e0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80035c6:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <_HandleIncomingPacket+0xd8>)
 80035c8:	7e1b      	ldrb	r3, [r3, #24]
 80035ca:	4618      	mov	r0, r3
 80035cc:	1cfb      	adds	r3, r7, #3
 80035ce:	2201      	movs	r2, #1
 80035d0:	4619      	mov	r1, r3
 80035d2:	f7ff fedd 	bl	8003390 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80035d6:	e003      	b.n	80035e0 <_HandleIncomingPacket+0xcc>
      break;
 80035d8:	bf00      	nop
 80035da:	e002      	b.n	80035e2 <_HandleIncomingPacket+0xce>
      break;
 80035dc:	bf00      	nop
 80035de:	e000      	b.n	80035e2 <_HandleIncomingPacket+0xce>
      break;
 80035e0:	bf00      	nop
    }
  }
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200196f8 	.word	0x200196f8

080035f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08c      	sub	sp, #48	@ 0x30
 80035f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80035f6:	2301      	movs	r3, #1
 80035f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80035fa:	1d3b      	adds	r3, r7, #4
 80035fc:	3301      	adds	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003604:	4b32      	ldr	r3, [pc, #200]	@ (80036d0 <_TrySendOverflowPacket+0xe0>)
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800360a:	e00b      	b.n	8003624 <_TrySendOverflowPacket+0x34>
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	b2da      	uxtb	r2, r3
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003616:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	09db      	lsrs	r3, r3, #7
 8003622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	2b7f      	cmp	r3, #127	@ 0x7f
 8003628:	d8f0      	bhi.n	800360c <_TrySendOverflowPacket+0x1c>
 800362a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003638:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800363a:	4b26      	ldr	r3, [pc, #152]	@ (80036d4 <_TrySendOverflowPacket+0xe4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003640:	4b23      	ldr	r3, [pc, #140]	@ (80036d0 <_TrySendOverflowPacket+0xe0>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	e00b      	b.n	800366c <_TrySendOverflowPacket+0x7c>
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	1c59      	adds	r1, r3, #1
 800365c:	6279      	str	r1, [r7, #36]	@ 0x24
 800365e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	09db      	lsrs	r3, r3, #7
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003670:	d8f0      	bhi.n	8003654 <_TrySendOverflowPacket+0x64>
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	627a      	str	r2, [r7, #36]	@ 0x24
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003682:	4b13      	ldr	r3, [pc, #76]	@ (80036d0 <_TrySendOverflowPacket+0xe0>)
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	4618      	mov	r0, r3
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	461a      	mov	r2, r3
 8003690:	1d3b      	adds	r3, r7, #4
 8003692:	4619      	mov	r1, r3
 8003694:	f7fc fd9c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003698:	4603      	mov	r3, r0
 800369a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800369c:	f7ff fe0e 	bl	80032bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <_TrySendOverflowPacket+0xe0>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80036ac:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <_TrySendOverflowPacket+0xe0>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <_TrySendOverflowPacket+0xe0>)
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e004      	b.n	80036c4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80036ba:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <_TrySendOverflowPacket+0xe0>)
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	3301      	adds	r3, #1
 80036c0:	4a03      	ldr	r2, [pc, #12]	@ (80036d0 <_TrySendOverflowPacket+0xe0>)
 80036c2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80036c4:	693b      	ldr	r3, [r7, #16]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3730      	adds	r7, #48	@ 0x30
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200196f8 	.word	0x200196f8
 80036d4:	e0001004 	.word	0xe0001004

080036d8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	@ 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80036e4:	4b96      	ldr	r3, [pc, #600]	@ (8003940 <_SendPacket+0x268>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d010      	beq.n	800370e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80036ec:	4b94      	ldr	r3, [pc, #592]	@ (8003940 <_SendPacket+0x268>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8130 	beq.w	8003956 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80036f6:	4b92      	ldr	r3, [pc, #584]	@ (8003940 <_SendPacket+0x268>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d109      	bne.n	8003712 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80036fe:	f7ff ff77 	bl	80035f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003702:	4b8f      	ldr	r3, [pc, #572]	@ (8003940 <_SendPacket+0x268>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b01      	cmp	r3, #1
 8003708:	f040 8127 	bne.w	800395a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800370c:	e001      	b.n	8003712 <_SendPacket+0x3a>
    goto Send;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <_SendPacket+0x3c>
Send:
 8003712:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b1f      	cmp	r3, #31
 8003718:	d809      	bhi.n	800372e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800371a:	4b89      	ldr	r3, [pc, #548]	@ (8003940 <_SendPacket+0x268>)
 800371c:	69da      	ldr	r2, [r3, #28]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 8118 	bne.w	800395e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b17      	cmp	r3, #23
 8003732:	d807      	bhi.n	8003744 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3b01      	subs	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e0c4      	b.n	80038ce <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003750:	d912      	bls.n	8003778 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	09da      	lsrs	r2, r3, #7
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b01      	subs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	3a01      	subs	r2, #1
 800376a:	60fa      	str	r2, [r7, #12]
 800376c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e006      	b.n	8003786 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3b01      	subs	r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b7e      	cmp	r3, #126	@ 0x7e
 800378a:	d807      	bhi.n	800379c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3b01      	subs	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e098      	b.n	80038ce <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037a2:	d212      	bcs.n	80037ca <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	09da      	lsrs	r2, r3, #7
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	3a01      	subs	r2, #1
 80037bc:	60fa      	str	r2, [r7, #12]
 80037be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e081      	b.n	80038ce <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037d0:	d21d      	bcs.n	800380e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0b9a      	lsrs	r2, r3, #14
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	09db      	lsrs	r3, r3, #7
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	3a01      	subs	r2, #1
 80037ec:	60fa      	str	r2, [r7, #12]
 80037ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	3a01      	subs	r2, #1
 8003800:	60fa      	str	r2, [r7, #12]
 8003802:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e05f      	b.n	80038ce <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003814:	d228      	bcs.n	8003868 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0d5a      	lsrs	r2, r3, #21
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3b01      	subs	r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0b9b      	lsrs	r3, r3, #14
 800382a:	b2db      	uxtb	r3, r3
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	3a01      	subs	r2, #1
 8003830:	60fa      	str	r2, [r7, #12]
 8003832:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	09db      	lsrs	r3, r3, #7
 8003840:	b2db      	uxtb	r3, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	3a01      	subs	r2, #1
 8003846:	60fa      	str	r2, [r7, #12]
 8003848:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	3a01      	subs	r2, #1
 800385a:	60fa      	str	r2, [r7, #12]
 800385c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003860:	b2da      	uxtb	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e032      	b.n	80038ce <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	0f1a      	lsrs	r2, r3, #28
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3b01      	subs	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	0d5b      	lsrs	r3, r3, #21
 800387c:	b2db      	uxtb	r3, r3
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	3a01      	subs	r2, #1
 8003882:	60fa      	str	r2, [r7, #12]
 8003884:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003888:	b2da      	uxtb	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0b9b      	lsrs	r3, r3, #14
 8003892:	b2db      	uxtb	r3, r3
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	3a01      	subs	r2, #1
 8003898:	60fa      	str	r2, [r7, #12]
 800389a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	09db      	lsrs	r3, r3, #7
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	3a01      	subs	r2, #1
 80038ae:	60fa      	str	r2, [r7, #12]
 80038b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	3a01      	subs	r2, #1
 80038c2:	60fa      	str	r2, [r7, #12]
 80038c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80038ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <_SendPacket+0x26c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80038d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003940 <_SendPacket+0x268>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	e00b      	b.n	8003900 <_SendPacket+0x228>
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	1c59      	adds	r1, r3, #1
 80038f0:	6279      	str	r1, [r7, #36]	@ 0x24
 80038f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	09db      	lsrs	r3, r3, #7
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	2b7f      	cmp	r3, #127	@ 0x7f
 8003904:	d8f0      	bhi.n	80038e8 <_SendPacket+0x210>
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	627a      	str	r2, [r7, #36]	@ 0x24
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003916:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <_SendPacket+0x268>)
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	4618      	mov	r0, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	461a      	mov	r2, r3
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	f7fc fc53 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800392a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800392c:	f7ff fcc6 	bl	80032bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003936:	4a02      	ldr	r2, [pc, #8]	@ (8003940 <_SendPacket+0x268>)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	60d3      	str	r3, [r2, #12]
 800393c:	e010      	b.n	8003960 <_SendPacket+0x288>
 800393e:	bf00      	nop
 8003940:	200196f8 	.word	0x200196f8
 8003944:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003948:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <_SendPacket+0x2d8>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	b2da      	uxtb	r2, r3
 8003950:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <_SendPacket+0x2d8>)
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e004      	b.n	8003960 <_SendPacket+0x288>
    goto SendDone;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <_SendPacket+0x288>
      goto SendDone;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <_SendPacket+0x288>
      goto SendDone;
 800395e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003960:	4b13      	ldr	r3, [pc, #76]	@ (80039b0 <_SendPacket+0x2d8>)
 8003962:	7e1b      	ldrb	r3, [r3, #24]
 8003964:	4619      	mov	r1, r3
 8003966:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <_SendPacket+0x2dc>)
 8003968:	460b      	mov	r3, r1
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	440b      	add	r3, r1
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	336c      	adds	r3, #108	@ 0x6c
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b0e      	ldr	r3, [pc, #56]	@ (80039b0 <_SendPacket+0x2d8>)
 8003978:	7e1b      	ldrb	r3, [r3, #24]
 800397a:	4618      	mov	r0, r3
 800397c:	490d      	ldr	r1, [pc, #52]	@ (80039b4 <_SendPacket+0x2dc>)
 800397e:	4603      	mov	r3, r0
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4403      	add	r3, r0
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3370      	adds	r3, #112	@ 0x70
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d00b      	beq.n	80039a8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003990:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <_SendPacket+0x2d8>)
 8003992:	789b      	ldrb	r3, [r3, #2]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <_SendPacket+0x2d8>)
 800399a:	2201      	movs	r2, #1
 800399c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800399e:	f7ff fdb9 	bl	8003514 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80039a2:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <_SendPacket+0x2d8>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80039a8:	bf00      	nop
 80039aa:	3728      	adds	r7, #40	@ 0x28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200196f8 	.word	0x200196f8
 80039b4:	20019240 	.word	0x20019240

080039b8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80039c0:	f3ef 8311 	mrs	r3, BASEPRI
 80039c4:	f04f 0120 	mov.w	r1, #32
 80039c8:	f381 8811 	msr	BASEPRI, r1
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	4808      	ldr	r0, [pc, #32]	@ (80039f0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80039d0:	f7ff fd94 	bl	80034fc <_PreparePacket>
 80039d4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	68b8      	ldr	r0, [r7, #8]
 80039dc:	f7ff fe7c 	bl	80036d8 <_SendPacket>
  RECORD_END();
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f383 8811 	msr	BASEPRI, r3
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20019728 	.word	0x20019728

080039f4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80039fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003a02:	f04f 0120 	mov.w	r1, #32
 8003a06:	f381 8811 	msr	BASEPRI, r1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	4816      	ldr	r0, [pc, #88]	@ (8003a68 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003a0e:	f7ff fd75 	bl	80034fc <_PreparePacket>
 8003a12:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	e00b      	b.n	8003a3a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	1c59      	adds	r1, r3, #1
 8003a2a:	61f9      	str	r1, [r7, #28]
 8003a2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	09db      	lsrs	r3, r3, #7
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a3e:	d8f0      	bhi.n	8003a22 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	61fa      	str	r2, [r7, #28]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	6938      	ldr	r0, [r7, #16]
 8003a56:	f7ff fe3f 	bl	80036d8 <_SendPacket>
  RECORD_END();
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f383 8811 	msr	BASEPRI, r3
}
 8003a60:	bf00      	nop
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20019728 	.word	0x20019728

08003a6c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08c      	sub	sp, #48	@ 0x30
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a78:	f3ef 8311 	mrs	r3, BASEPRI
 8003a7c:	f04f 0120 	mov.w	r1, #32
 8003a80:	f381 8811 	msr	BASEPRI, r1
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	4825      	ldr	r0, [pc, #148]	@ (8003b1c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003a88:	f7ff fd38 	bl	80034fc <_PreparePacket>
 8003a8c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a9a:	e00b      	b.n	8003ab4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	1c59      	adds	r1, r3, #1
 8003aa4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003aa6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab0:	09db      	lsrs	r3, r3, #7
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ab8:	d8f0      	bhi.n	8003a9c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	e00b      	b.n	8003aec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	1c59      	adds	r1, r3, #1
 8003adc:	6279      	str	r1, [r7, #36]	@ 0x24
 8003ade:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	09db      	lsrs	r3, r3, #7
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2b7f      	cmp	r3, #127	@ 0x7f
 8003af0:	d8f0      	bhi.n	8003ad4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	627a      	str	r2, [r7, #36]	@ 0x24
 8003af8:	6a3a      	ldr	r2, [r7, #32]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	6979      	ldr	r1, [r7, #20]
 8003b06:	69b8      	ldr	r0, [r7, #24]
 8003b08:	f7ff fde6 	bl	80036d8 <_SendPacket>
  RECORD_END();
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f383 8811 	msr	BASEPRI, r3
}
 8003b12:	bf00      	nop
 8003b14:	3730      	adds	r7, #48	@ 0x30
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20019728 	.word	0x20019728

08003b20 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	@ 0x30
 8003b24:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003b26:	4b59      	ldr	r3, [pc, #356]	@ (8003c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b30:	f04f 0120 	mov.w	r1, #32
 8003b34:	f381 8811 	msr	BASEPRI, r1
 8003b38:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003b3a:	4b54      	ldr	r3, [pc, #336]	@ (8003c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	220a      	movs	r2, #10
 8003b40:	4953      	ldr	r1, [pc, #332]	@ (8003c90 <SEGGER_SYSVIEW_Start+0x170>)
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fb44 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003b4e:	f7ff fbb5 	bl	80032bc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003b52:	200a      	movs	r0, #10
 8003b54:	f7ff ff30 	bl	80039b8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b58:	f3ef 8311 	mrs	r3, BASEPRI
 8003b5c:	f04f 0120 	mov.w	r1, #32
 8003b60:	f381 8811 	msr	BASEPRI, r1
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	484b      	ldr	r0, [pc, #300]	@ (8003c94 <SEGGER_SYSVIEW_Start+0x174>)
 8003b68:	f7ff fcc8 	bl	80034fc <_PreparePacket>
 8003b6c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b76:	4b45      	ldr	r3, [pc, #276]	@ (8003c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b7c:	e00b      	b.n	8003b96 <SEGGER_SYSVIEW_Start+0x76>
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b84:	1c59      	adds	r1, r3, #1
 8003b86:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003b88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	09db      	lsrs	r3, r3, #7
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b9a:	d8f0      	bhi.n	8003b7e <SEGGER_SYSVIEW_Start+0x5e>
 8003b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003baa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb0:	4b36      	ldr	r3, [pc, #216]	@ (8003c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	623b      	str	r3, [r7, #32]
 8003bb6:	e00b      	b.n	8003bd0 <SEGGER_SYSVIEW_Start+0xb0>
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	6279      	str	r1, [r7, #36]	@ 0x24
 8003bc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	09db      	lsrs	r3, r3, #7
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bd4:	d8f0      	bhi.n	8003bb8 <SEGGER_SYSVIEW_Start+0x98>
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	4b28      	ldr	r3, [pc, #160]	@ (8003c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e00b      	b.n	8003c0a <SEGGER_SYSVIEW_Start+0xea>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	1c59      	adds	r1, r3, #1
 8003bfa:	61f9      	str	r1, [r7, #28]
 8003bfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	09db      	lsrs	r3, r3, #7
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c0e:	d8f0      	bhi.n	8003bf2 <SEGGER_SYSVIEW_Start+0xd2>
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	61fa      	str	r2, [r7, #28]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	e00b      	b.n	8003c42 <SEGGER_SYSVIEW_Start+0x122>
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	1c59      	adds	r1, r3, #1
 8003c32:	6179      	str	r1, [r7, #20]
 8003c34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	09db      	lsrs	r3, r3, #7
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c46:	d8f0      	bhi.n	8003c2a <SEGGER_SYSVIEW_Start+0x10a>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	617a      	str	r2, [r7, #20]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c58:	2218      	movs	r2, #24
 8003c5a:	6839      	ldr	r1, [r7, #0]
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fd3b 	bl	80036d8 <_SendPacket>
      RECORD_END();
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c68:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003c70:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003c76:	f000 f9c7 	bl	8004008 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003c7a:	f000 f9b1 	bl	8003fe0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003c7e:	f000 fc8d 	bl	800459c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003c82:	bf00      	nop
 8003c84:	3730      	adds	r7, #48	@ 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200196f8 	.word	0x200196f8
 8003c90:	0800484c 	.word	0x0800484c
 8003c94:	20019728 	.word	0x20019728

08003c98 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8003ca2:	f04f 0120 	mov.w	r1, #32
 8003ca6:	f381 8811 	msr	BASEPRI, r1
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	480b      	ldr	r0, [pc, #44]	@ (8003cdc <SEGGER_SYSVIEW_Stop+0x44>)
 8003cae:	f7ff fc25 	bl	80034fc <_PreparePacket>
 8003cb2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003cbc:	220b      	movs	r2, #11
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	6838      	ldr	r0, [r7, #0]
 8003cc2:	f7ff fd09 	bl	80036d8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003cc6:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f383 8811 	msr	BASEPRI, r3
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20019728 	.word	0x20019728
 8003ce0:	200196f8 	.word	0x200196f8

08003ce4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	@ 0x30
 8003ce8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003cea:	f3ef 8311 	mrs	r3, BASEPRI
 8003cee:	f04f 0120 	mov.w	r1, #32
 8003cf2:	f381 8811 	msr	BASEPRI, r1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	4845      	ldr	r0, [pc, #276]	@ (8003e10 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003cfa:	f7ff fbff 	bl	80034fc <_PreparePacket>
 8003cfe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d08:	4b42      	ldr	r3, [pc, #264]	@ (8003e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d0e:	e00b      	b.n	8003d28 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003d1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	09db      	lsrs	r3, r3, #7
 8003d26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d2c:	d8f0      	bhi.n	8003d10 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d42:	4b34      	ldr	r3, [pc, #208]	@ (8003e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	623b      	str	r3, [r7, #32]
 8003d48:	e00b      	b.n	8003d62 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	1c59      	adds	r1, r3, #1
 8003d52:	6279      	str	r1, [r7, #36]	@ 0x24
 8003d54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	09db      	lsrs	r3, r3, #7
 8003d60:	623b      	str	r3, [r7, #32]
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d66:	d8f0      	bhi.n	8003d4a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d6e:	6a3a      	ldr	r2, [r7, #32]
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	4b25      	ldr	r3, [pc, #148]	@ (8003e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e00b      	b.n	8003d9c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	1c59      	adds	r1, r3, #1
 8003d8c:	61f9      	str	r1, [r7, #28]
 8003d8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	09db      	lsrs	r3, r3, #7
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003da0:	d8f0      	bhi.n	8003d84 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	61fa      	str	r2, [r7, #28]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e00b      	b.n	8003dd4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1c59      	adds	r1, r3, #1
 8003dc4:	6179      	str	r1, [r7, #20]
 8003dc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	09db      	lsrs	r3, r3, #7
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dd8:	d8f0      	bhi.n	8003dbc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	617a      	str	r2, [r7, #20]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003dea:	2218      	movs	r2, #24
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	68b8      	ldr	r0, [r7, #8]
 8003df0:	f7ff fc72 	bl	80036d8 <_SendPacket>
  RECORD_END();
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003dfa:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003e02:	4b04      	ldr	r3, [pc, #16]	@ (8003e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	4798      	blx	r3
  }
}
 8003e08:	bf00      	nop
 8003e0a:	3730      	adds	r7, #48	@ 0x30
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20019728 	.word	0x20019728
 8003e14:	200196f8 	.word	0x200196f8

08003e18 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b092      	sub	sp, #72	@ 0x48
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003e20:	f3ef 8311 	mrs	r3, BASEPRI
 8003e24:	f04f 0120 	mov.w	r1, #32
 8003e28:	f381 8811 	msr	BASEPRI, r1
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	486a      	ldr	r0, [pc, #424]	@ (8003fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003e30:	f7ff fb64 	bl	80034fc <_PreparePacket>
 8003e34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b66      	ldr	r3, [pc, #408]	@ (8003fdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e4a:	e00b      	b.n	8003e64 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e52:	1c59      	adds	r1, r3, #1
 8003e54:	6479      	str	r1, [r7, #68]	@ 0x44
 8003e56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e60:	09db      	lsrs	r3, r3, #7
 8003e62:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e66:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e68:	d8f0      	bhi.n	8003e4c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e84:	e00b      	b.n	8003e9e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e8c:	1c59      	adds	r1, r3, #1
 8003e8e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003e90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9a:	09db      	lsrs	r3, r3, #7
 8003e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ea2:	d8f0      	bhi.n	8003e86 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003eaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff faed 	bl	800349c <_EncodeStr>
 8003ec2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003ec4:	2209      	movs	r2, #9
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	6938      	ldr	r0, [r7, #16]
 8003eca:	f7ff fc05 	bl	80036d8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b40      	ldr	r3, [pc, #256]	@ (8003fdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ee2:	e00b      	b.n	8003efc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eea:	1c59      	adds	r1, r3, #1
 8003eec:	6379      	str	r1, [r7, #52]	@ 0x34
 8003eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef8:	09db      	lsrs	r3, r3, #7
 8003efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f00:	d8f0      	bhi.n	8003ee4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f1c:	e00b      	b.n	8003f36 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f24:	1c59      	adds	r1, r3, #1
 8003f26:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003f28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f32:	09db      	lsrs	r3, r3, #7
 8003f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f38:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f3a:	d8f0      	bhi.n	8003f1e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	e00b      	b.n	8003f70 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	1c59      	adds	r1, r3, #1
 8003f60:	6279      	str	r1, [r7, #36]	@ 0x24
 8003f62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	09db      	lsrs	r3, r3, #7
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f74:	d8f0      	bhi.n	8003f58 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e00b      	b.n	8003faa <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	1c59      	adds	r1, r3, #1
 8003f9a:	61f9      	str	r1, [r7, #28]
 8003f9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	09db      	lsrs	r3, r3, #7
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fae:	d8f0      	bhi.n	8003f92 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	61fa      	str	r2, [r7, #28]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003fc0:	2215      	movs	r2, #21
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	6938      	ldr	r0, [r7, #16]
 8003fc6:	f7ff fb87 	bl	80036d8 <_SendPacket>
  RECORD_END();
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f383 8811 	msr	BASEPRI, r3
}
 8003fd0:	bf00      	nop
 8003fd2:	3748      	adds	r7, #72	@ 0x48
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20019728 	.word	0x20019728
 8003fdc:	200196f8 	.word	0x200196f8

08003fe0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003fe4:	4b07      	ldr	r3, [pc, #28]	@ (8004004 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003fec:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003ff6:	4b03      	ldr	r3, [pc, #12]	@ (8004004 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4798      	blx	r3
  }
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	200196f8 	.word	0x200196f8

08004008 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800400e:	4b15      	ldr	r3, [pc, #84]	@ (8004064 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01a      	beq.n	800404c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004016:	4b13      	ldr	r3, [pc, #76]	@ (8004064 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004020:	4b10      	ldr	r3, [pc, #64]	@ (8004064 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4798      	blx	r3
 8004028:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800402c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800402e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	000a      	movs	r2, r1
 800403c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800403e:	4613      	mov	r3, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4621      	mov	r1, r4
 8004044:	200d      	movs	r0, #13
 8004046:	f7ff fd11 	bl	8003a6c <SEGGER_SYSVIEW_RecordU32x2>
 800404a:	e006      	b.n	800405a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800404c:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4619      	mov	r1, r3
 8004052:	200c      	movs	r0, #12
 8004054:	f7ff fcce 	bl	80039f4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bd90      	pop	{r4, r7, pc}
 8004062:	bf00      	nop
 8004064:	200196f8 	.word	0x200196f8
 8004068:	e0001004 	.word	0xe0001004

0800406c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004072:	f3ef 8311 	mrs	r3, BASEPRI
 8004076:	f04f 0120 	mov.w	r1, #32
 800407a:	f381 8811 	msr	BASEPRI, r1
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	4819      	ldr	r0, [pc, #100]	@ (80040e8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004082:	f7ff fa3b 	bl	80034fc <_PreparePacket>
 8004086:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800408c:	4b17      	ldr	r3, [pc, #92]	@ (80040ec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004094:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	e00b      	b.n	80040b8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	1c59      	adds	r1, r3, #1
 80040a8:	6179      	str	r1, [r7, #20]
 80040aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	09db      	lsrs	r3, r3, #7
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80040bc:	d8f0      	bhi.n	80040a0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	617a      	str	r2, [r7, #20]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80040ce:	2202      	movs	r2, #2
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	68b8      	ldr	r0, [r7, #8]
 80040d4:	f7ff fb00 	bl	80036d8 <_SendPacket>
  RECORD_END();
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f383 8811 	msr	BASEPRI, r3
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20019728 	.word	0x20019728
 80040ec:	e000ed04 	.word	0xe000ed04

080040f0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040f6:	f3ef 8311 	mrs	r3, BASEPRI
 80040fa:	f04f 0120 	mov.w	r1, #32
 80040fe:	f381 8811 	msr	BASEPRI, r1
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	4807      	ldr	r0, [pc, #28]	@ (8004124 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004106:	f7ff f9f9 	bl	80034fc <_PreparePacket>
 800410a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800410c:	2203      	movs	r2, #3
 800410e:	6839      	ldr	r1, [r7, #0]
 8004110:	6838      	ldr	r0, [r7, #0]
 8004112:	f7ff fae1 	bl	80036d8 <_SendPacket>
  RECORD_END();
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f383 8811 	msr	BASEPRI, r3
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20019728 	.word	0x20019728

08004128 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800412e:	f3ef 8311 	mrs	r3, BASEPRI
 8004132:	f04f 0120 	mov.w	r1, #32
 8004136:	f381 8811 	msr	BASEPRI, r1
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	4807      	ldr	r0, [pc, #28]	@ (800415c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800413e:	f7ff f9dd 	bl	80034fc <_PreparePacket>
 8004142:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004144:	2212      	movs	r2, #18
 8004146:	6839      	ldr	r1, [r7, #0]
 8004148:	6838      	ldr	r0, [r7, #0]
 800414a:	f7ff fac5 	bl	80036d8 <_SendPacket>
  RECORD_END();
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f383 8811 	msr	BASEPRI, r3
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20019728 	.word	0x20019728

08004160 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004168:	f3ef 8311 	mrs	r3, BASEPRI
 800416c:	f04f 0120 	mov.w	r1, #32
 8004170:	f381 8811 	msr	BASEPRI, r1
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	4817      	ldr	r0, [pc, #92]	@ (80041d4 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8004178:	f7ff f9c0 	bl	80034fc <_PreparePacket>
 800417c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e00b      	b.n	80041a4 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	61f9      	str	r1, [r7, #28]
 8004196:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	09db      	lsrs	r3, r3, #7
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80041a8:	d8f0      	bhi.n	800418c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	61fa      	str	r2, [r7, #28]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80041ba:	221c      	movs	r2, #28
 80041bc:	68f9      	ldr	r1, [r7, #12]
 80041be:	6938      	ldr	r0, [r7, #16]
 80041c0:	f7ff fa8a 	bl	80036d8 <_SendPacket>
  RECORD_END();
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f383 8811 	msr	BASEPRI, r3
}
 80041ca:	bf00      	nop
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20019728 	.word	0x20019728

080041d8 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80041e2:	f3ef 8311 	mrs	r3, BASEPRI
 80041e6:	f04f 0120 	mov.w	r1, #32
 80041ea:	f381 8811 	msr	BASEPRI, r1
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	4824      	ldr	r0, [pc, #144]	@ (8004284 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80041f2:	f7ff f983 	bl	80034fc <_PreparePacket>
 80041f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	e00b      	b.n	800421e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	1c59      	adds	r1, r3, #1
 800420e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004210:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	09db      	lsrs	r3, r3, #7
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	2b7f      	cmp	r3, #127	@ 0x7f
 8004222:	d8f0      	bhi.n	8004206 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	627a      	str	r2, [r7, #36]	@ 0x24
 800422a:	6a3a      	ldr	r2, [r7, #32]
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e00b      	b.n	8004256 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	1c59      	adds	r1, r3, #1
 8004246:	61f9      	str	r1, [r7, #28]
 8004248:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	09db      	lsrs	r3, r3, #7
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b7f      	cmp	r3, #127	@ 0x7f
 800425a:	d8f0      	bhi.n	800423e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	61fa      	str	r2, [r7, #28]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800426c:	221c      	movs	r2, #28
 800426e:	68f9      	ldr	r1, [r7, #12]
 8004270:	6938      	ldr	r0, [r7, #16]
 8004272:	f7ff fa31 	bl	80036d8 <_SendPacket>
  RECORD_END();
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f383 8811 	msr	BASEPRI, r3
}
 800427c:	bf00      	nop
 800427e:	3728      	adds	r7, #40	@ 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20019728 	.word	0x20019728

08004288 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800428e:	f3ef 8311 	mrs	r3, BASEPRI
 8004292:	f04f 0120 	mov.w	r1, #32
 8004296:	f381 8811 	msr	BASEPRI, r1
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	4807      	ldr	r0, [pc, #28]	@ (80042bc <SEGGER_SYSVIEW_OnIdle+0x34>)
 800429e:	f7ff f92d 	bl	80034fc <_PreparePacket>
 80042a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80042a4:	2211      	movs	r2, #17
 80042a6:	6839      	ldr	r1, [r7, #0]
 80042a8:	6838      	ldr	r0, [r7, #0]
 80042aa:	f7ff fa15 	bl	80036d8 <_SendPacket>
  RECORD_END();
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f383 8811 	msr	BASEPRI, r3
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20019728 	.word	0x20019728

080042c0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042c8:	f3ef 8311 	mrs	r3, BASEPRI
 80042cc:	f04f 0120 	mov.w	r1, #32
 80042d0:	f381 8811 	msr	BASEPRI, r1
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	4819      	ldr	r0, [pc, #100]	@ (800433c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80042d8:	f7ff f910 	bl	80034fc <_PreparePacket>
 80042dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042e2:	4b17      	ldr	r3, [pc, #92]	@ (8004340 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	e00b      	b.n	800430e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	1c59      	adds	r1, r3, #1
 80042fe:	61f9      	str	r1, [r7, #28]
 8004300:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	09db      	lsrs	r3, r3, #7
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b7f      	cmp	r3, #127	@ 0x7f
 8004312:	d8f0      	bhi.n	80042f6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	61fa      	str	r2, [r7, #28]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004324:	2208      	movs	r2, #8
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	6938      	ldr	r0, [r7, #16]
 800432a:	f7ff f9d5 	bl	80036d8 <_SendPacket>
  RECORD_END();
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f383 8811 	msr	BASEPRI, r3
}
 8004334:	bf00      	nop
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20019728 	.word	0x20019728
 8004340:	200196f8 	.word	0x200196f8

08004344 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800434c:	f3ef 8311 	mrs	r3, BASEPRI
 8004350:	f04f 0120 	mov.w	r1, #32
 8004354:	f381 8811 	msr	BASEPRI, r1
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	4819      	ldr	r0, [pc, #100]	@ (80043c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800435c:	f7ff f8ce 	bl	80034fc <_PreparePacket>
 8004360:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004366:	4b17      	ldr	r3, [pc, #92]	@ (80043c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e00b      	b.n	8004392 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	61f9      	str	r1, [r7, #28]
 8004384:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	09db      	lsrs	r3, r3, #7
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b7f      	cmp	r3, #127	@ 0x7f
 8004396:	d8f0      	bhi.n	800437a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	61fa      	str	r2, [r7, #28]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80043a8:	2204      	movs	r2, #4
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	6938      	ldr	r0, [r7, #16]
 80043ae:	f7ff f993 	bl	80036d8 <_SendPacket>
  RECORD_END();
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f383 8811 	msr	BASEPRI, r3
}
 80043b8:	bf00      	nop
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20019728 	.word	0x20019728
 80043c4:	200196f8 	.word	0x200196f8

080043c8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80043d0:	f3ef 8311 	mrs	r3, BASEPRI
 80043d4:	f04f 0120 	mov.w	r1, #32
 80043d8:	f381 8811 	msr	BASEPRI, r1
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	4819      	ldr	r0, [pc, #100]	@ (8004444 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80043e0:	f7ff f88c 	bl	80034fc <_PreparePacket>
 80043e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80043ea:	4b17      	ldr	r3, [pc, #92]	@ (8004448 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e00b      	b.n	8004416 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	1c59      	adds	r1, r3, #1
 8004406:	61f9      	str	r1, [r7, #28]
 8004408:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	09db      	lsrs	r3, r3, #7
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b7f      	cmp	r3, #127	@ 0x7f
 800441a:	d8f0      	bhi.n	80043fe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	61fa      	str	r2, [r7, #28]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800442c:	2206      	movs	r2, #6
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	6938      	ldr	r0, [r7, #16]
 8004432:	f7ff f951 	bl	80036d8 <_SendPacket>
  RECORD_END();
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f383 8811 	msr	BASEPRI, r3
}
 800443c:	bf00      	nop
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20019728 	.word	0x20019728
 8004448:	200196f8 	.word	0x200196f8

0800444c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b08c      	sub	sp, #48	@ 0x30
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004456:	4b40      	ldr	r3, [pc, #256]	@ (8004558 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d077      	beq.n	800454e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800445e:	4b3e      	ldr	r3, [pc, #248]	@ (8004558 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004464:	2300      	movs	r3, #0
 8004466:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004468:	e008      	b.n	800447c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	3301      	adds	r3, #1
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004480:	429a      	cmp	r2, r3
 8004482:	d3f2      	bcc.n	800446a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004484:	e000      	b.n	8004488 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004486:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d055      	beq.n	800453a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800448e:	f3ef 8311 	mrs	r3, BASEPRI
 8004492:	f04f 0120 	mov.w	r1, #32
 8004496:	f381 8811 	msr	BASEPRI, r1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	482f      	ldr	r0, [pc, #188]	@ (800455c <SEGGER_SYSVIEW_SendModule+0x110>)
 800449e:	f7ff f82d 	bl	80034fc <_PreparePacket>
 80044a2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	623b      	str	r3, [r7, #32]
 80044b0:	e00b      	b.n	80044ca <SEGGER_SYSVIEW_SendModule+0x7e>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	1c59      	adds	r1, r3, #1
 80044ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80044bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	09db      	lsrs	r3, r3, #7
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80044ce:	d8f0      	bhi.n	80044b2 <SEGGER_SYSVIEW_SendModule+0x66>
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80044d6:	6a3a      	ldr	r2, [r7, #32]
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044de:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e00b      	b.n	8004504 <SEGGER_SYSVIEW_SendModule+0xb8>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	61f9      	str	r1, [r7, #28]
 80044f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	09db      	lsrs	r3, r3, #7
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b7f      	cmp	r3, #127	@ 0x7f
 8004508:	d8f0      	bhi.n	80044ec <SEGGER_SYSVIEW_SendModule+0xa0>
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	61fa      	str	r2, [r7, #28]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800451a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2280      	movs	r2, #128	@ 0x80
 8004520:	4619      	mov	r1, r3
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7fe ffba 	bl	800349c <_EncodeStr>
 8004528:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800452a:	2216      	movs	r2, #22
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	6938      	ldr	r0, [r7, #16]
 8004530:	f7ff f8d2 	bl	80036d8 <_SendPacket>
      RECORD_END();
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800453a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <SEGGER_SYSVIEW_SendModule+0x102>
 8004540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8004548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4798      	blx	r3
    }
  }
}
 800454e:	bf00      	nop
 8004550:	3730      	adds	r7, #48	@ 0x30
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20019720 	.word	0x20019720
 800455c:	20019728 	.word	0x20019728

08004560 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004566:	4b0c      	ldr	r3, [pc, #48]	@ (8004598 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00f      	beq.n	800458e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800456e:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f2      	bne.n	8004574 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20019720 	.word	0x20019720

0800459c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80045a2:	f3ef 8311 	mrs	r3, BASEPRI
 80045a6:	f04f 0120 	mov.w	r1, #32
 80045aa:	f381 8811 	msr	BASEPRI, r1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	4817      	ldr	r0, [pc, #92]	@ (8004610 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80045b2:	f7fe ffa3 	bl	80034fc <_PreparePacket>
 80045b6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	e00b      	b.n	80045e0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1c59      	adds	r1, r3, #1
 80045d0:	6179      	str	r1, [r7, #20]
 80045d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	09db      	lsrs	r3, r3, #7
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80045e4:	d8f0      	bhi.n	80045c8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	617a      	str	r2, [r7, #20]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80045f6:	221b      	movs	r2, #27
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	68b8      	ldr	r0, [r7, #8]
 80045fc:	f7ff f86c 	bl	80036d8 <_SendPacket>
  RECORD_END();
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f383 8811 	msr	BASEPRI, r3
}
 8004606:	bf00      	nop
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20019728 	.word	0x20019728
 8004614:	20019724 	.word	0x20019724

08004618 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	@ 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004620:	f3ef 8311 	mrs	r3, BASEPRI
 8004624:	f04f 0120 	mov.w	r1, #32
 8004628:	f381 8811 	msr	BASEPRI, r1
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	4827      	ldr	r0, [pc, #156]	@ (80046cc <SEGGER_SYSVIEW_Warn+0xb4>)
 8004630:	f7fe ff64 	bl	80034fc <_PreparePacket>
 8004634:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004636:	2280      	movs	r2, #128	@ 0x80
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	6938      	ldr	r0, [r7, #16]
 800463c:	f7fe ff2e 	bl	800349c <_EncodeStr>
 8004640:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
 8004646:	2301      	movs	r3, #1
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	e00b      	b.n	8004664 <SEGGER_SYSVIEW_Warn+0x4c>
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	1c59      	adds	r1, r3, #1
 8004654:	6279      	str	r1, [r7, #36]	@ 0x24
 8004656:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	09db      	lsrs	r3, r3, #7
 8004662:	623b      	str	r3, [r7, #32]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	2b7f      	cmp	r3, #127	@ 0x7f
 8004668:	d8f0      	bhi.n	800464c <SEGGER_SYSVIEW_Warn+0x34>
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	e00b      	b.n	800469c <SEGGER_SYSVIEW_Warn+0x84>
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	1c59      	adds	r1, r3, #1
 800468c:	61f9      	str	r1, [r7, #28]
 800468e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	09db      	lsrs	r3, r3, #7
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b7f      	cmp	r3, #127	@ 0x7f
 80046a0:	d8f0      	bhi.n	8004684 <SEGGER_SYSVIEW_Warn+0x6c>
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	61fa      	str	r2, [r7, #28]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80046b2:	221a      	movs	r2, #26
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	6938      	ldr	r0, [r7, #16]
 80046b8:	f7ff f80e 	bl	80036d8 <_SendPacket>
  RECORD_END();
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f383 8811 	msr	BASEPRI, r3
}
 80046c2:	bf00      	nop
 80046c4:	3728      	adds	r7, #40	@ 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20019728 	.word	0x20019728

080046d0 <memcmp>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	3901      	subs	r1, #1
 80046d4:	4402      	add	r2, r0
 80046d6:	4290      	cmp	r0, r2
 80046d8:	d101      	bne.n	80046de <memcmp+0xe>
 80046da:	2000      	movs	r0, #0
 80046dc:	e005      	b.n	80046ea <memcmp+0x1a>
 80046de:	7803      	ldrb	r3, [r0, #0]
 80046e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	d001      	beq.n	80046ec <memcmp+0x1c>
 80046e8:	1b18      	subs	r0, r3, r4
 80046ea:	bd10      	pop	{r4, pc}
 80046ec:	3001      	adds	r0, #1
 80046ee:	e7f2      	b.n	80046d6 <memcmp+0x6>

080046f0 <memset>:
 80046f0:	4402      	add	r2, r0
 80046f2:	4603      	mov	r3, r0
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d100      	bne.n	80046fa <memset+0xa>
 80046f8:	4770      	bx	lr
 80046fa:	f803 1b01 	strb.w	r1, [r3], #1
 80046fe:	e7f9      	b.n	80046f4 <memset+0x4>

08004700 <__libc_init_array>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4d0d      	ldr	r5, [pc, #52]	@ (8004738 <__libc_init_array+0x38>)
 8004704:	4c0d      	ldr	r4, [pc, #52]	@ (800473c <__libc_init_array+0x3c>)
 8004706:	1b64      	subs	r4, r4, r5
 8004708:	10a4      	asrs	r4, r4, #2
 800470a:	2600      	movs	r6, #0
 800470c:	42a6      	cmp	r6, r4
 800470e:	d109      	bne.n	8004724 <__libc_init_array+0x24>
 8004710:	4d0b      	ldr	r5, [pc, #44]	@ (8004740 <__libc_init_array+0x40>)
 8004712:	4c0c      	ldr	r4, [pc, #48]	@ (8004744 <__libc_init_array+0x44>)
 8004714:	f000 f826 	bl	8004764 <_init>
 8004718:	1b64      	subs	r4, r4, r5
 800471a:	10a4      	asrs	r4, r4, #2
 800471c:	2600      	movs	r6, #0
 800471e:	42a6      	cmp	r6, r4
 8004720:	d105      	bne.n	800472e <__libc_init_array+0x2e>
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	f855 3b04 	ldr.w	r3, [r5], #4
 8004728:	4798      	blx	r3
 800472a:	3601      	adds	r6, #1
 800472c:	e7ee      	b.n	800470c <__libc_init_array+0xc>
 800472e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004732:	4798      	blx	r3
 8004734:	3601      	adds	r6, #1
 8004736:	e7f2      	b.n	800471e <__libc_init_array+0x1e>
 8004738:	08004860 	.word	0x08004860
 800473c:	08004860 	.word	0x08004860
 8004740:	08004860 	.word	0x08004860
 8004744:	08004864 	.word	0x08004864

08004748 <memcpy>:
 8004748:	440a      	add	r2, r1
 800474a:	4291      	cmp	r1, r2
 800474c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004750:	d100      	bne.n	8004754 <memcpy+0xc>
 8004752:	4770      	bx	lr
 8004754:	b510      	push	{r4, lr}
 8004756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800475a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800475e:	4291      	cmp	r1, r2
 8004760:	d1f9      	bne.n	8004756 <memcpy+0xe>
 8004762:	bd10      	pop	{r4, pc}

08004764 <_init>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr

08004770 <_fini>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr
